{"version":3,"sources":["fileinput.js","fileinput_locale_zh.js"],"names":[],"mappingszoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fileinput.js","sourcesContent":["/*!\r\n * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2014 - 2015\r\n * @version 4.2.8\r\n *\r\n * File input styled for Bootstrap 3.0 that utilizes HTML5 File Input's advanced \r\n * features including the FileReader API. \r\n * \r\n * The plugin drastically enhances the HTML file input to preview multiple files on the client before\r\n * upload. In addition it provides the ability to preview content of images, text, videos, audio, html, \r\n * flash and other objects. It also offers the ability to upload and delete files using AJAX, and add \r\n * files in batches (i.e. preview, append, or remove before upload).\r\n * \r\n * Author: Kartik Visweswaran\r\n * Copyright: 2015, Kartik Visweswaran, Krajee.com\r\n * For more JQuery plugins visit http://plugins.krajee.com\r\n * For more Yii related demos visit http://demos.krajee.com\r\n */\r\n(function (factory) {\r\n    \"use strict\";\r\n    if (typeof define === 'function' && define.amd) { // jshint ignore:line\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory); // jshint ignore:line\r\n    } else { // noinspection JSUnresolvedVariable\r\n        if (typeof module === 'object' && module.exports) { // jshint ignore:line\r\n            // Node/CommonJS\r\n            // noinspection JSUnresolvedVariable\r\n            module.exports = factory(require('jquery')); // jshint ignore:line\r\n        } else {\r\n            // Browser globals\r\n            factory(window.jQuery);\r\n        }\r\n    }\r\n}(function ($) {\r\n    \"use strict\";\r\n\r\n    $.fn.fileinputLocales = {};\r\n\r\n    var isIE, isEdge, handler, previewCache, getNum, hasFileAPISupport, hasDragDropSupport, hasFileUploadSupport, addCss,\r\n        STYLE_SETTING, OBJECT_PARAMS, DEFAULT_PREVIEW, defaultFileActionSettings, tMain1, tMain2, tPreview, tIcon, tClose,\r\n        tCaption, tBtnDefault, tBtnLink, tBtnBrowse, tModal, tProgress, tFooter, tActions, tActionDelete, tActionUpload,\r\n        tZoom, tGeneric, tHtml, tImage, tText, tVideo, tAudio, tFlash, tObject, tOther, defaultLayoutTemplates,\r\n        defaultPreviewTemplates, defaultPreviewTypes, defaultPreviewSettings, defaultFileTypeSettings, isEmpty, isArray,\r\n        isSet, getElement, uniqId, htmlEncode, replaceTags, objUrl, FileInput;\r\n\r\n    isIE = function (ver) {\r\n        // check for IE versions < 11\r\n        if (navigator.appName !== 'Microsoft Internet Explorer') {\r\n            return false;\r\n        }\r\n        if (ver === 10) {\r\n            return new RegExp('msie\\\\s' + ver, 'i').test(navigator.userAgent);\r\n        }\r\n        var div = document.createElement(\"div\"), status;\r\n        div.innerHTML = \"<!--[if IE \" + ver + \"]> <i></i> <![endif]-->\";\r\n        status = div.getElementsByTagName(\"i\").length;\r\n        document.body.appendChild(div);\r\n        div.parentNode.removeChild(div);\r\n        return status;\r\n    };\r\n    isEdge = function () {\r\n        return new RegExp('Edge\\/[0-9]+', 'i').test(navigator.userAgent);\r\n    };\r\n    handler = function ($el, event, callback, skipNS) {\r\n        var ev = skipNS ? event : event + '.fileinput';\r\n        $el.off(ev).on(ev, callback);\r\n    };\r\n    previewCache = {\r\n        data: {},\r\n        init: function (obj) {\r\n            var content = obj.initialPreview, id = obj.id;\r\n            if (content.length > 0 && !isArray(content)) {\r\n                content = content.split(obj.initialPreviewDelimiter);\r\n            }\r\n            previewCache.data[id] = {\r\n                content: content,\r\n                config: obj.initialPreviewConfig,\r\n                tags: obj.initialPreviewThumbTags,\r\n                delimiter: obj.initialPreviewDelimiter,\r\n                template: obj.previewGenericTemplate,\r\n                msg: function (n) {\r\n                    return obj.getMsgSelected(n);\r\n                },\r\n                initId: obj.previewInitId,\r\n                footer: obj.getLayoutTemplate('footer').replace(/\\{progress}/g, obj.renderThumbProgress()),\r\n                isDelete: obj.initialPreviewShowDelete,\r\n                caption: obj.initialCaption,\r\n                actions: function (showUpload, showDelete, disabled, url, key) {\r\n                    return obj.renderFileActions(showUpload, showDelete, disabled, url, key);\r\n                }\r\n            };\r\n        },\r\n        fetch: function (id) {\r\n            return previewCache.data[id].content.filter(function (n) {\r\n                return n !== null;\r\n            });\r\n        },\r\n        count: function (id, all) {\r\n            return !!previewCache.data[id] && !!previewCache.data[id].content ?\r\n                (all ? previewCache.data[id].content.length : previewCache.fetch(id).length) : 0;\r\n        },\r\n        get: function (id, i, isDisabled) {\r\n            var ind = 'init_' + i, data = previewCache.data[id], config = data.config[i],\r\n                previewId = data.initId + '-' + ind, out, $tmp, frameClass = ' file-preview-initial';\r\n            /** @namespace config.frameClass */\r\n            /** @namespace config.frameAttr */\r\n            isDisabled = isDisabled === undefined ? true : isDisabled;\r\n            if (data.content[i] === null) {\r\n                return '';\r\n            }\r\n            if (!isEmpty(config) && !isEmpty(config.frameClass)) {\r\n                frameClass += ' ' + config.frameClass;\r\n            }\r\n            out = data.template\r\n                .replace(/\\{previewId}/g, previewId)\r\n                .replace(/\\{frameClass}/g, frameClass)\r\n                .replace(/\\{fileindex}/g, ind)\r\n                .replace(/\\{content}/g, data.content[i])\r\n                .replace(/\\{footer}/g, previewCache.footer(id, i, isDisabled));\r\n            if (data.tags.length && data.tags[i]) {\r\n                out = replaceTags(out, data.tags[i]);\r\n            }\r\n            if (!isEmpty(config) && !isEmpty(config.frameAttr)) {\r\n                $tmp = $(document.createElement('div')).html(out);\r\n                $tmp.find('.file-preview-initial').attr(config.frameAttr);\r\n                out = $tmp.html();\r\n                $tmp.remove();\r\n            }\r\n            return out;\r\n        },\r\n        add: function (id, content, config, tags, append) {\r\n            var data = $.extend(true, {}, previewCache.data[id]), index;\r\n            if (!isArray(content)) {\r\n                content = content.split(data.delimiter);\r\n            }\r\n            if (append) {\r\n                index = data.content.push(content) - 1;\r\n                data.config[index] = config;\r\n                data.tags[index] = tags;\r\n            } else {\r\n                index = content.length;\r\n                data.content = content;\r\n                data.config = config;\r\n                data.tags = tags;\r\n            }\r\n            previewCache.data[id] = data;\r\n            return index;\r\n        },\r\n        set: function (id, content, config, tags, append) {\r\n            var data = $.extend(true, {}, previewCache.data[id]), i, chk;\r\n            if (!content || !content.length) {\r\n                return;\r\n            }\r\n            if (!isArray(content)) {\r\n                content = content.split(data.delimiter);\r\n            }\r\n            chk = content.filter(function (n) {\r\n                return n !== null;\r\n            });\r\n            if (!chk.length) {\r\n                return;\r\n            }\r\n            if (data.content === undefined) {\r\n                data.content = [];\r\n            }\r\n            if (data.config === undefined) {\r\n                data.config = [];\r\n            }\r\n            if (data.tags === undefined) {\r\n                data.tags = [];\r\n            }\r\n            if (append) {\r\n                for (i = 0; i < content.length; i++) {\r\n                    if (content[i]) {\r\n                        data.content.push(content[i]);\r\n                    }\r\n                }\r\n                for (i = 0; i < config.length; i++) {\r\n                    if (config[i]) {\r\n                        data.config.push(config[i]);\r\n                    }\r\n                }\r\n                for (i = 0; i < tags.length; i++) {\r\n                    if (tags[i]) {\r\n                        data.tags.push(tags[i]);\r\n                    }\r\n                }\r\n            } else {\r\n                data.content = content;\r\n                data.config = config;\r\n                data.tags = tags;\r\n            }\r\n            previewCache.data[id] = data;\r\n        },\r\n        unset: function (id, index) {\r\n            var chk = previewCache.count(id);\r\n            if (!chk) {\r\n                return;\r\n            }\r\n            if (chk === 1) {\r\n                previewCache.data[id].content = [];\r\n                previewCache.data[id].config = [];\r\n                return;\r\n            }\r\n            previewCache.data[id].content[index] = null;\r\n            previewCache.data[id].config[index] = null;\r\n        },\r\n        out: function (id) {\r\n            var html = '', data = previewCache.data[id], caption, len = previewCache.count(id, true);\r\n            if (len === 0) {\r\n                return {content: '', caption: ''};\r\n            }\r\n            for (var i = 0; i < len; i++) {\r\n                html += previewCache.get(id, i);\r\n            }\r\n            caption = data.msg(previewCache.count(id));\r\n            return {content: html, caption: caption};\r\n        },\r\n        footer: function (id, i, isDisabled) {\r\n            var data = previewCache.data[id];\r\n            isDisabled = isDisabled === undefined ? true : isDisabled;\r\n            if (data.config.length === 0 || isEmpty(data.config[i])) {\r\n                return '';\r\n            }\r\n            var config = data.config[i],\r\n                caption = isSet('caption', config) ? config.caption : '',\r\n                width = isSet('width', config) ? config.width : 'auto',\r\n                url = isSet('url', config) ? config.url : false,\r\n                key = isSet('key', config) ? config.key : null,\r\n                disabled = (url === false) && isDisabled,\r\n                actions = data.isDelete ? data.actions(false, true, disabled, url, key) : '',\r\n                footer = data.footer.replace(/\\{actions}/g, actions);\r\n            return footer.replace(/\\{caption}/g, caption)\r\n                .replace(/\\{width}/g, width)\r\n                .replace(/\\{indicator}/g, '')\r\n                .replace(/\\{indicatorTitle}/g, '');\r\n        }\r\n    };\r\n    getNum = function (num, def) {\r\n        def = def || 0;\r\n        if (typeof num === \"number\") {\r\n            return num;\r\n        }\r\n        if (typeof num === \"string\") {\r\n            num = parseFloat(num);\r\n        }\r\n        return isNaN(num) ? def : num;\r\n    };\r\n    hasFileAPISupport = function () {\r\n        return window.File && window.FileReader;\r\n    };\r\n    hasDragDropSupport = function () {\r\n        var div = document.createElement('div');\r\n        /** @namespace div.draggable */\r\n        /** @namespace div.ondragstart */\r\n        /** @namespace div.ondrop */\r\n        return !isIE(9) && !isEdge() && // Fix for MS Edge drag & drop support bug\r\n            (div.draggable !== undefined || (div.ondragstart !== undefined && div.ondrop !== undefined));\r\n    };\r\n    hasFileUploadSupport = function () {\r\n        return hasFileAPISupport() && window.FormData;\r\n    };\r\n    addCss = function ($el, css) {\r\n        $el.removeClass(css).addClass(css);\r\n    };\r\n    STYLE_SETTING = 'style=\"width:{width};height:{height};\"';\r\n    OBJECT_PARAMS = '      <param name=\"controller\" value=\"true\" />\\n' +\r\n        '      <param name=\"allowFullScreen\" value=\"true\" />\\n' +\r\n        '      <param name=\"allowScriptAccess\" value=\"always\" />\\n' +\r\n        '      <param name=\"autoPlay\" value=\"false\" />\\n' +\r\n        '      <param name=\"autoStart\" value=\"false\" />\\n' +\r\n        '      <param name=\"quality\" value=\"high\" />\\n';\r\n    DEFAULT_PREVIEW = '<div class=\"file-preview-other\">\\n' +\r\n        '   <span class=\"{previewFileIconClass}\">{previewFileIcon}</span>\\n' +\r\n        '</div>';\r\n    defaultFileActionSettings = {\r\n        removeIcon: '<i class=\"glyphicon glyphicon-trash text-danger\"></i>',\r\n        removeClass: 'btn btn-xs btn-default',\r\n        removeTitle: 'Remove file',\r\n        uploadIcon: '<i class=\"glyphicon glyphicon-upload text-info\"></i>',\r\n        uploadClass: 'btn btn-xs btn-default',\r\n        uploadTitle: 'Upload file',\r\n        indicatorNew: '<i class=\"glyphicon glyphicon-hand-down text-warning\"></i>',\r\n        indicatorSuccess: '<i class=\"glyphicon glyphicon-ok-sign text-success\"></i>',\r\n        indicatorError: '<i class=\"glyphicon glyphicon-exclamation-sign text-danger\"></i>',\r\n        indicatorLoading: '<i class=\"glyphicon glyphicon-hand-up text-muted\"></i>',\r\n        indicatorNewTitle: 'Not uploaded yet',\r\n        indicatorSuccessTitle: 'Uploaded',\r\n        indicatorErrorTitle: 'Upload Error',\r\n        indicatorLoadingTitle: 'Uploading ...'\r\n    };\r\n    tMain1 = '{preview}\\n' +\r\n        '<div class=\"kv-upload-progress hide\"></div>\\n' +\r\n        '<div class=\"input-group {class}\">\\n' +\r\n        '   {caption}\\n' +\r\n        '   <div class=\"input-group-btn\">\\n' +\r\n        '       {remove}\\n' +\r\n        '       {cancel}\\n' +\r\n        '       {upload}\\n' +\r\n        '       {browse}\\n' +\r\n        '   </div>\\n' +\r\n        '</div>';\r\n    tMain2 = '{preview}\\n<div class=\"kv-upload-progress hide\"></div>\\n{remove}\\n{cancel}\\n{upload}\\n{browse}\\n';\r\n    tPreview = '<div class=\"file-preview {class}\">\\n' +\r\n        '    {close}' +\r\n        '    <div class=\"{dropClass}\">\\n' +\r\n        '    <div class=\"file-preview-thumbnails\">\\n' +\r\n        '    </div>\\n' +\r\n        '    <div class=\"clearfix\"></div>' +\r\n        '    <div class=\"file-preview-status text-center text-success\"></div>\\n' +\r\n        '    <div class=\"kv-fileinput-error\"></div>\\n' +\r\n        '    </div>\\n' +\r\n        '</div>';\r\n    tClose = '<div class=\"close fileinput-remove\">&times;</div>\\n';\r\n    tIcon = '<span class=\"glyphicon glyphicon-file kv-caption-icon\"></span>';\r\n    tCaption = '<div tabindex=\"500\" class=\"form-control file-caption {class}\">\\n' +\r\n        '   <div class=\"file-caption-name\"></div>\\n' +\r\n        '</div>\\n';\r\n    //noinspection HtmlUnknownAttribute\r\n    tBtnDefault = '<button type=\"{type}\" tabindex=\"500\" title=\"{title}\" class=\"{css}\" {status}>{icon}{label}</button>';\r\n    tBtnLink = '<a href=\"{href}\" tabindex=\"500\" title=\"{title}\" class=\"{css}\" {status}>{icon}{label}</a>';\r\n    tBtnBrowse = '<div tabindex=\"500\" class=\"{css}\" {status}>{icon}{label}</div>';\r\n    tModal = '<div id=\"{id}\" class=\"file-preview-detail-modal modal fade\" tabindex=\"-1\">\\n' +\r\n        '  <div class=\"modal-dialog modal-lg\">\\n' +\r\n        '    <div class=\"modal-content\">\\n' +\r\n        '      <div class=\"modal-header\">\\n' +\r\n        '        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\\n' +\r\n        '        <h3 class=\"modal-title\">{heading} <small>{title}</small></h3>\\n' +\r\n        '      </div>\\n' +\r\n        '      <div class=\"modal-body\">\\n' +\r\n        '           <pre>{body}</pre>\\n' +\r\n        '      </div>\\n' +\r\n        '    </div>\\n' +\r\n        '  </div>\\n' +\r\n        '</div>';\r\n    tProgress = '<div class=\"progress\">\\n' +\r\n        '    <div class=\"{class}\" role=\"progressbar\"' +\r\n        ' aria-valuenow=\"{percent}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:{percent}%;\">\\n' +\r\n        '        {percent}%\\n' +\r\n        '     </div>\\n' +\r\n        '</div>';\r\n    tFooter = '<div class=\"file-thumbnail-footer\">\\n' +\r\n        '    <div class=\"file-footer-caption\" title=\"{caption}\">{caption}</div>\\n' +\r\n        '    {progress} {actions}\\n' +\r\n        '</div>';\r\n    tActions = '<div class=\"file-actions\">\\n' +\r\n        '    <div class=\"file-footer-buttons\">\\n' +\r\n        '        {upload}{delete}{other}' +\r\n        '    </div>\\n' +\r\n        '    <div class=\"file-upload-indicator\" title=\"{indicatorTitle}\">{indicator}</div>\\n' +\r\n        '    <div class=\"clearfix\"></div>\\n' +\r\n        '</div>';\r\n    tActionDelete = '<button type=\"button\" class=\"kv-file-remove {removeClass}\" ' +\r\n        'title=\"{removeTitle}\"{dataUrl}{dataKey}>{removeIcon}</button>\\n';\r\n    tActionUpload = '<button type=\"button\" class=\"kv-file-upload {uploadClass}\" title=\"{uploadTitle}\">' +\r\n        '   {uploadIcon}\\n</button>\\n';\r\n    tZoom = '<button type=\"button\" class=\"btn btn-default btn-xs btn-block\" title=\"{zoomTitle}: {caption}\" onclick=\"{dialog}\">\\n' +\r\n        '   {zoomInd}\\n' +\r\n        '</button>\\n';\r\n    tGeneric = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\">\\n' +\r\n        '   {content}\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>\\n';\r\n    tHtml = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\">\\n' +\r\n        '    <object class=\"file-object\" data=\"{data}\" type=\"{type}\" width=\"{width}\" height=\"{height}\">\\n' +\r\n        '       ' + DEFAULT_PREVIEW + '\\n' +\r\n        '    </object>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>';\r\n    tImage = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\">\\n' +\r\n        '   <img src=\"{data}\" class=\"file-preview-image\" title=\"{caption}\" alt=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>\\n';\r\n    tText = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\">\\n' +\r\n        '   <pre class=\"file-preview-text\" title=\"{caption}\" ' + STYLE_SETTING + '>{data}</pre>\\n' +\r\n        '   {zoom}\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>';\r\n    tVideo = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' +\r\n        ' title=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   <video width=\"{width}\" height=\"{height}\" controls>\\n' +\r\n        '       <source src=\"{data}\" type=\"{type}\">\\n' +\r\n        '       ' + DEFAULT_PREVIEW + '\\n' +\r\n        '   </video>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>\\n';\r\n    tAudio = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' +\r\n        ' title=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   <audio controls>\\n' +\r\n        '       <source src=\"' + '{data}' + '\" type=\"{type}\">\\n' +\r\n        '       ' + DEFAULT_PREVIEW + '\\n' +\r\n        '   </audio>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>';\r\n    tFlash = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' +\r\n        ' title=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   <object class=\"file-object\" type=\"application/x-shockwave-flash\" width=\"{width}\" height=\"{height}\" data=\"{data}\">\\n' +\r\n        OBJECT_PARAMS + '       ' + DEFAULT_PREVIEW + '\\n' +\r\n        '   </object>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>\\n';\r\n    tObject = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' +\r\n        ' title=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   <object class=\"file-object\" data=\"{data}\" type=\"{type}\" width=\"{width}\" height=\"{height}\">\\n' +\r\n        '       <param name=\"movie\" value=\"{caption}\" />\\n' +\r\n        OBJECT_PARAMS + '         ' + DEFAULT_PREVIEW + '\\n' +\r\n        '   </object>\\n' +\r\n        '   {footer}\\n' +\r\n        '</div>';\r\n    tOther = '<div class=\"file-preview-frame{frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' +\r\n        ' title=\"{caption}\" ' + STYLE_SETTING + '>\\n' +\r\n        '   <div class=\"file-preview-other-frame\">\\n' +\r\n        '   ' + DEFAULT_PREVIEW + '\\n' +\r\n        '   </div>\\n' +\r\n        '   <div class=\"file-preview-other-footer\">{footer}</div>\\n' +\r\n        '</div>';\r\n    defaultLayoutTemplates = {\r\n        main1: tMain1,\r\n        main2: tMain2,\r\n        preview: tPreview,\r\n        close: tClose,\r\n        zoom: tZoom,\r\n        icon: tIcon,\r\n        caption: tCaption,\r\n        modal: tModal,\r\n        progress: tProgress,\r\n        footer: tFooter,\r\n        actions: tActions,\r\n        actionDelete: tActionDelete,\r\n        actionUpload: tActionUpload,\r\n        btnDefault: tBtnDefault,\r\n        btnLink: tBtnLink,\r\n        btnBrowse: tBtnBrowse\r\n    };\r\n    defaultPreviewTemplates = {\r\n        generic: tGeneric,\r\n        html: tHtml,\r\n        image: tImage,\r\n        text: tText,\r\n        video: tVideo,\r\n        audio: tAudio,\r\n        flash: tFlash,\r\n        object: tObject,\r\n        other: tOther\r\n    };\r\n    defaultPreviewTypes = ['image', 'html', 'text', 'video', 'audio', 'flash', 'object'];\r\n    defaultPreviewSettings = {\r\n        image: {width: \"auto\", height: \"160px\"},\r\n        html: {width: \"213px\", height: \"160px\"},\r\n        text: {width: \"160px\", height: \"136px\"},\r\n        video: {width: \"213px\", height: \"160px\"},\r\n        audio: {width: \"213px\", height: \"80px\"},\r\n        flash: {width: \"213px\", height: \"160px\"},\r\n        object: {width: \"160px\", height: \"160px\"},\r\n        other: {width: \"160px\", height: \"160px\"}\r\n    };\r\n    defaultFileTypeSettings = {\r\n        image: function (vType, vName) {\r\n            return (vType !== undefined) ? vType.match('image.*') : vName.match(/\\.(gif|png|jpe?g)$/i);\r\n        },\r\n        html: function (vType, vName) {\r\n            return (vType !== undefined) ? vType === 'text/html' : vName.match(/\\.(htm|html)$/i);\r\n        },\r\n        text: function (vType, vName) {\r\n            return (vType !== undefined && vType.match('text.*')) || vName.match(/\\.(txt|md|csv|nfo|ini|json|php|js|css)$/i);\r\n        },\r\n        video: function (vType, vName) {\r\n            return (vType !== undefined && vType.match(/\\.video\\/(ogg|mp4|webm|3gp)$/i)) || vName.match(/\\.(og?|mp4|webm|3gp)$/i);\r\n        },\r\n        audio: function (vType, vName) {\r\n            return (vType !== undefined && vType.match(/\\.audio\\/(ogg|mp3|wav)$/i)) || vName.match(/\\.(ogg|mp3|wav)$/i);\r\n        },\r\n        flash: function (vType, vName) {\r\n            return (vType !== undefined && vType === 'application/x-shockwave-flash') || vName.match(/\\.(swf)$/i);\r\n        },\r\n        object: function () {\r\n            return true;\r\n        },\r\n        other: function () {\r\n            return true;\r\n        }\r\n    };\r\n    isEmpty = function (value, trim) {\r\n        return value === undefined || value === null || value.length === 0 || (trim && $.trim(value) === '');\r\n    };\r\n    isArray = function (a) {\r\n        return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';\r\n    };\r\n    isSet = function (needle, haystack) {\r\n        return (typeof haystack === 'object' && needle in haystack);\r\n    };\r\n    getElement = function (options, param, value) {\r\n        return (isEmpty(options) || isEmpty(options[param])) ? value : $(options[param]);\r\n    };\r\n    uniqId = function () {\r\n        return Math.round(new Date().getTime() + (Math.random() * 100));\r\n    };\r\n    htmlEncode = function (str) {\r\n        return str.replace(/&/g, '&amp;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\"/g, '&quot;')\r\n            .replace(/'/g, '&apos;');\r\n    };\r\n    replaceTags = function (str, tags) {\r\n        var out = str;\r\n        if (!tags) {\r\n            return out;\r\n        }\r\n        $.each(tags, function (key, value) {\r\n            if (typeof value === \"function\") {\r\n                value = value();\r\n            }\r\n            out = out.split(key).join(value);\r\n        });\r\n        return out;\r\n    };\r\n    //noinspection JSUnresolvedVariable\r\n    objUrl = window.URL || window.webkitURL;\r\n    FileInput = function (element, options) {\r\n        var self = this;\r\n        self.$element = $(element);\r\n        if (!self.validate()) {\r\n            return;\r\n        }\r\n        self.isPreviewable = hasFileAPISupport();\r\n        self.isIE9 = isIE(9);\r\n        self.isIE10 = isIE(10);\r\n        if (self.isPreviewable || self.isIE9) {\r\n            self.init(options);\r\n            self.listen();\r\n        } else {\r\n            self.$element.removeClass('file-loading');\r\n        }\r\n    };\r\n\r\n    FileInput.prototype = {\r\n        constructor: FileInput,\r\n        validate: function () {\r\n            var self = this, $exception;\r\n            if (self.$element.attr('type') === 'file') {\r\n                return true;\r\n            }\r\n            $exception = '<div class=\"help-block alert alert-warning\">' +\r\n                '<h4>Invalid Input Type</h4>' +\r\n                'You must set an input <code>type = file</code> for <b>bootstrap-fileinput</b> plugin to initialize.' +\r\n                '</div>';\r\n            self.$element.after($exception);\r\n            return false;\r\n        },\r\n        init: function (options) {\r\n            var self = this, $el = self.$element, t;\r\n            $.each(options, function (key, value) {\r\n                switch (key) {\r\n                    case 'minFileCount':\r\n                    case 'maxFileCount':\r\n                    case 'maxFileSize':\r\n                        self[key] = getNum(value);\r\n                        break;\r\n                    default:\r\n                        self[key] = value;\r\n                        break;\r\n                }\r\n            });\r\n            self.fileInputCleared = false;\r\n            self.fileBatchCompleted = true;\r\n            if (!self.isPreviewable) {\r\n                self.showPreview = false;\r\n            }\r\n            self.uploadFileAttr = !isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';\r\n            self.reader = null;\r\n            self.formdata = {};\r\n            self.clearStack();\r\n            self.uploadCount = 0;\r\n            self.uploadStatus = {};\r\n            self.uploadLog = [];\r\n            self.uploadAsyncCount = 0;\r\n            self.loadedImages = [];\r\n            self.totalImagesCount = 0;\r\n            self.ajaxRequests = [];\r\n            self.isError = false;\r\n            self.ajaxAborted = false;\r\n            self.cancelling = false;\r\n            t = self.getLayoutTemplate('progress');\r\n            self.progressTemplate = t.replace('{class}', self.progressClass);\r\n            self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);\r\n            self.dropZoneEnabled = hasDragDropSupport() && self.dropZoneEnabled;\r\n            self.isDisabled = self.$element.attr('disabled') || self.$element.attr('readonly');\r\n            self.isUploadable = hasFileUploadSupport() && !isEmpty(self.uploadUrl);\r\n            self.slug = typeof options.slugCallback === \"function\" ? options.slugCallback : self.slugDefault;\r\n            self.mainTemplate = self.showCaption ? self.getLayoutTemplate('main1') : self.getLayoutTemplate('main2');\r\n            self.captionTemplate = self.getLayoutTemplate('caption');\r\n            self.previewGenericTemplate = self.getPreviewTemplate('generic');\r\n            if (self.resizeImage && (self.maxImageWidth || self.maxImageHeight)) {\r\n                self.imageCanvas = document.createElement('canvas');\r\n                self.imageCanvasContext = self.imageCanvas.getContext('2d');\r\n            }\r\n            if (isEmpty(self.$element.attr('id'))) {\r\n                self.$element.attr('id', uniqId());\r\n            }\r\n            if (self.$container === undefined) {\r\n                self.$container = self.createContainer();\r\n            } else {\r\n                self.refreshContainer();\r\n            }\r\n            self.$progress = self.$container.find('.kv-upload-progress');\r\n            self.$btnUpload = self.$container.find('.fileinput-upload');\r\n            self.$captionContainer = getElement(options, 'elCaptionContainer', self.$container.find('.file-caption'));\r\n            self.$caption = getElement(options, 'elCaptionText', self.$container.find('.file-caption-name'));\r\n            self.$previewContainer = getElement(options, 'elPreviewContainer', self.$container.find('.file-preview'));\r\n            self.$preview = getElement(options, 'elPreviewImage', self.$container.find('.file-preview-thumbnails'));\r\n            self.$previewStatus = getElement(options, 'elPreviewStatus', self.$container.find('.file-preview-status'));\r\n            self.$errorContainer = getElement(options, 'elErrorContainer',\r\n                self.$previewContainer.find('.kv-fileinput-error'));\r\n            if (!isEmpty(self.msgErrorClass)) {\r\n                addCss(self.$errorContainer, self.msgErrorClass);\r\n            }\r\n            self.$errorContainer.hide();\r\n            self.fileActionSettings = $.extend(defaultFileActionSettings, options.fileActionSettings);\r\n            self.previewInitId = \"preview-\" + uniqId();\r\n            self.id = self.$element.attr('id');\r\n            previewCache.init(self);\r\n            self.initPreview(true);\r\n            self.initPreviewDeletes();\r\n            self.options = options;\r\n            self.setFileDropZoneTitle();\r\n            self.$element.removeClass('file-loading');\r\n            if (self.$element.attr('disabled')) {\r\n                self.disable();\r\n            }\r\n        },\r\n        parseError: function (jqXHR, errorThrown, fileName) {\r\n            var self = this, errMsg = $.trim(errorThrown + ''),\r\n                dot = errMsg.slice(-1) === '.' ? '' : '.',\r\n                text = jqXHR.responseJSON !== undefined && jqXHR.responseJSON.error !== undefined ?\r\n                    jqXHR.responseJSON.error : jqXHR.responseText;\r\n            if (self.cancelling && self.msgUploadAborted) {\r\n                errMsg = self.msgUploadAborted;\r\n            }\r\n            if (self.showAjaxErrorDetails && text) {\r\n                text = $.trim(text.replace(/\\n\\s*\\n/g, '\\n'));\r\n                text = text.length > 0 ? '<pre>' + text + '</pre>' : '';\r\n                errMsg += dot + text;\r\n            } else {\r\n                errMsg += dot;\r\n            }\r\n            self.cancelling = false;\r\n            return fileName ? '<b>' + fileName + ': </b>' + errMsg : errMsg;\r\n        },\r\n        raise: function (event, params) {\r\n            var self = this, e = $.Event(event);\r\n            if (params !== undefined) {\r\n                self.$element.trigger(e, params);\r\n            } else {\r\n                self.$element.trigger(e);\r\n            }\r\n            if (e.isDefaultPrevented()) {\r\n                return false;\r\n            }\r\n            if (!e.result) {\r\n                return e.result;\r\n            }\r\n            switch (event) {\r\n                // ignore these events\r\n                case 'filebatchuploadcomplete':\r\n                case 'filebatchuploadsuccess':\r\n                case 'fileuploaded':\r\n                case 'fileclear':\r\n                case 'filecleared':\r\n                case 'filereset':\r\n                case 'fileerror':\r\n                case 'filefoldererror':\r\n                case 'fileuploaderror':\r\n                case 'filebatchuploaderror':\r\n                case 'filedeleteerror':\r\n                case 'filecustomerror':\r\n                case 'filesuccessremove':\r\n                    break;\r\n                // receive data response via `filecustomerror` event`\r\n                default:\r\n                    self.ajaxAborted = e.result;\r\n                    break;\r\n            }\r\n            return true;\r\n        },\r\n        getLayoutTemplate: function (t) {\r\n            var self = this,\r\n                template = isSet(t, self.layoutTemplates) ? self.layoutTemplates[t] : defaultLayoutTemplates[t];\r\n            if (isEmpty(self.customLayoutTags)) {\r\n                return template;\r\n            }\r\n            return replaceTags(template, self.customLayoutTags);\r\n        },\r\n        getPreviewTemplate: function (t) {\r\n            var self = this,\r\n                template = isSet(t, self.previewTemplates) ? self.previewTemplates[t] : defaultPreviewTemplates[t];\r\n            if (isEmpty(self.customPreviewTags)) {\r\n                return template;\r\n            }\r\n            return replaceTags(template, self.customPreviewTags);\r\n        },\r\n        parseFilePreviewIcon: function (content, fname) {\r\n            var self = this, ext, icn = self.previewFileIcon;\r\n            if (fname && fname.indexOf('.') > -1) {\r\n                ext = fname.split('.').pop();\r\n                if (self.previewFileIconSettings && self.previewFileIconSettings[ext]) {\r\n                    icn = self.previewFileIconSettings[ext];\r\n                }\r\n                if (self.previewFileExtSettings) {\r\n                    $.each(self.previewFileExtSettings, function (key, func) {\r\n                        if (self.previewFileIconSettings[key] && func(ext)) {\r\n                            icn = self.previewFileIconSettings[key];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (content.indexOf('{previewFileIcon}') > -1) {\r\n                return content.replace(/\\{previewFileIconClass}/g, self.previewFileIconClass).replace(/\\{previewFileIcon}/g, icn);\r\n            }\r\n            return content;\r\n        },\r\n        getOutData: function (jqXHR, responseData, filesData) {\r\n            var self = this;\r\n            jqXHR = jqXHR || {};\r\n            responseData = responseData || {};\r\n            filesData = filesData || self.filestack.slice(0) || {};\r\n            return {\r\n                form: self.formdata,\r\n                files: filesData,\r\n                filenames: self.filenames,\r\n                extra: self.getExtraData(),\r\n                response: responseData,\r\n                reader: self.reader,\r\n                jqXHR: jqXHR\r\n            };\r\n        },\r\n        listen: function () {\r\n            var self = this, $el = self.$element, $cap = self.$captionContainer, $btnFile = self.$btnFile,\r\n                $form = $el.closest('form'), $cont = self.$container;\r\n            handler($el, 'change', $.proxy(self.change, self));\r\n            handler($btnFile, 'click', function () {\r\n                self.raise('filebrowse');\r\n                if (self.isError && !self.isUploadable) {\r\n                    self.clear();\r\n                }\r\n                $cap.focus();\r\n            });\r\n            handler($form, 'reset', $.proxy(self.reset, self));\r\n            handler($cont.find('.fileinput-remove:not([disabled])'), 'click', $.proxy(self.clear, self));\r\n            handler($cont.find('.fileinput-cancel'), 'click', $.proxy(self.cancel, self));\r\n            if (self.isUploadable && self.dropZoneEnabled && self.showPreview) {\r\n                self.initDragDrop();\r\n            }\r\n            if (!self.isUploadable) {\r\n                handler($form, 'submit', $.proxy(self.submitForm, self));\r\n            }\r\n            handler(self.$container.find('.fileinput-upload'), 'click', function (e) {\r\n                var $btn = $(this), $form, isEnabled = !$btn.hasClass('disabled') && isEmpty($btn.attr('disabled'));\r\n                if (!self.isUploadable) {\r\n                    if (isEnabled && $btn.attr('type') !== 'submit') {\r\n                        $form = $btn.closest('form');\r\n                        // downgrade to normal form submit if possible\r\n                        if ($form.length) {\r\n                            $form.trigger('submit');\r\n                        }\r\n                        e.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                e.preventDefault();\r\n                if (isEnabled) {\r\n                    self.upload();\r\n                }\r\n            });\r\n        },\r\n        submitForm: function () {\r\n            var self = this, $el = self.$element, files = $el.get(0).files;\r\n            if (files && self.minFileCount > 0 && self.getFileCount(files.length) < self.minFileCount) {\r\n                self.noFilesError({});\r\n                return false;\r\n            }\r\n            return !self.abort({});\r\n        },\r\n        abort: function (params) {\r\n            var self = this, data;\r\n            if (self.ajaxAborted && typeof self.ajaxAborted === \"object\" && self.ajaxAborted.message !== undefined) {\r\n                data = $.extend(self.getOutData(), params);\r\n                data.abortData = self.ajaxAborted.data || {};\r\n                data.abortMessage = self.ajaxAborted.message;\r\n                self.cancel();\r\n                self.setProgress(100);\r\n                self.showUploadError(self.ajaxAborted.message, data, 'filecustomerror');\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        noFilesError: function (params) {\r\n            var self = this, label = self.minFileCount > 1 ? self.filePlural : self.fileSingle,\r\n                msg = self.msgFilesTooLess.replace('{n}', self.minFileCount).replace('{files}', label),\r\n                $error = self.$errorContainer;\r\n            self.addError(msg);\r\n            self.isError = true;\r\n            self.updateFileDetails(0);\r\n            $error.fadeIn(800);\r\n            self.raise('fileerror', [params]);\r\n            self.clearFileInput();\r\n            addCss(self.$container, 'has-error');\r\n        },\r\n        setProgress: function (p, $el) {\r\n            var self = this, pct = Math.min(p, 100),\r\n                template = pct < 100 ? self.progressTemplate : self.progressCompleteTemplate;\r\n            $el = $el || self.$progress;\r\n            if (!isEmpty(template)) {\r\n                $el.html(template.replace(/\\{percent}/g, pct));\r\n            }\r\n        },\r\n        lock: function () {\r\n            var self = this;\r\n            self.resetErrors();\r\n            self.disable();\r\n            if (self.showRemove) {\r\n                addCss(self.$container.find('.fileinput-remove'), 'hide');\r\n            }\r\n            if (self.showCancel) {\r\n                self.$container.find('.fileinput-cancel').removeClass('hide');\r\n            }\r\n            self.raise('filelock', [self.filestack, self.getExtraData()]);\r\n        },\r\n        unlock: function (reset) {\r\n            var self = this;\r\n            if (reset === undefined) {\r\n                reset = true;\r\n            }\r\n            self.enable();\r\n            if (self.showCancel) {\r\n                addCss(self.$container.find('.fileinput-cancel'), 'hide');\r\n            }\r\n            if (self.showRemove) {\r\n                self.$container.find('.fileinput-remove').removeClass('hide');\r\n            }\r\n            if (reset) {\r\n                self.resetFileStack();\r\n            }\r\n            self.raise('fileunlock', [self.filestack, self.getExtraData()]);\r\n        },\r\n        resetFileStack: function () {\r\n            var self = this, i = 0, newstack = [], newnames = [];\r\n            self.getThumbs().each(function () {\r\n                var $thumb = $(this), ind = $thumb.attr('data-fileindex'),\r\n                    file = self.filestack[ind];\r\n                if (ind === -1) {\r\n                    return;\r\n                }\r\n                if (file !== undefined) {\r\n                    newstack[i] = file;\r\n                    newnames[i] = self.getFileName(file);\r\n                    $thumb.attr({\r\n                        'id': self.previewInitId + '-' + i,\r\n                        'data-fileindex': i\r\n                    });\r\n                    i++;\r\n                } else {\r\n                    $thumb.attr({\r\n                        'id': 'uploaded-' + uniqId(),\r\n                        'data-fileindex': '-1'\r\n                    });\r\n                }\r\n            });\r\n            self.filestack = newstack;\r\n            self.filenames = newnames;\r\n        },\r\n        destroy: function () {\r\n            var self = this, $cont = self.$container;\r\n            $cont.find('.file-drop-zone').off();\r\n            self.$element.insertBefore($cont).off('.fileinput').removeData();\r\n            $cont.off().remove();\r\n        },\r\n        refresh: function (options) {\r\n            var self = this, $el = self.$element;\r\n            options = options ? $.extend(self.options, options) : self.options;\r\n            self.destroy();\r\n            $el.fileinput(options);\r\n            if ($el.val()) {\r\n                $el.trigger('change.fileinput');\r\n            }\r\n        },\r\n        initDragDrop: function () {\r\n            var self = this, $zone = self.$container.find('.file-drop-zone'),\r\n                allEvents = 'dragenter.fileinput dragover.fileinput drop.fileinput';\r\n            handler($zone, 'dragenter.fileinput dragover.fileinput', function (e) {\r\n                var hasFiles = $.inArray('Files', e.originalEvent.dataTransfer.types) > -1;\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                if (self.isDisabled || !hasFiles) {\r\n                    e.originalEvent.dataTransfer.effectAllowed = 'none';\r\n                    e.originalEvent.dataTransfer.dropEffect = 'none';\r\n                    return;\r\n                }\r\n                addCss($(this), 'file-highlighted');\r\n            }, true);\r\n            handler($zone, 'dragleave', function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                if (self.isDisabled) {\r\n                    return;\r\n                }\r\n                $(this).removeClass('file-highlighted');\r\n            });\r\n            handler($zone, 'drop', function (e) {\r\n                e.preventDefault();\r\n                /** @namespace e.originalEvent.dataTransfer */\r\n                if (self.isDisabled || isEmpty(e.originalEvent.dataTransfer.files)) {\r\n                    return;\r\n                }\r\n                self.change(e, 'dragdrop');\r\n                $(this).removeClass('file-highlighted');\r\n            });\r\n            handler($(document), allEvents, function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n            }, true);\r\n        },\r\n        setFileDropZoneTitle: function () {\r\n            var self = this, $zone = self.$container.find('.file-drop-zone');\r\n            $zone.find('.' + self.dropZoneTitleClass).remove();\r\n            if (!self.isUploadable || !self.showPreview || $zone.length === 0 || self.getFileStack().length > 0 || !self.dropZoneEnabled) {\r\n                return;\r\n            }\r\n            if ($zone.find('.file-preview-frame').length === 0 && isEmpty(self.defaultPreviewContent)) {\r\n                $zone.prepend('<div class=\"' + self.dropZoneTitleClass + '\">' + self.dropZoneTitle + '</div>');\r\n            }\r\n            self.$container.removeClass('file-input-new');\r\n            addCss(self.$container, 'file-input-ajax-new');\r\n        },\r\n        errorsExist: function () {\r\n            var self = this, $err;\r\n            if (self.$errorContainer.find('li').length) {\r\n                return true;\r\n            }\r\n            $err = $(document.createElement('div')).html(self.$errorContainer.html());\r\n            $err.find('span.kv-error-close').remove();\r\n            $err.find('ul').remove();\r\n            return $.trim($err.text()).length ? true : false;\r\n        },\r\n        getMsgSelected: function (n) {\r\n            var self = this, strFiles = n === 1 ? self.fileSingle : self.filePlural;\r\n            return self.msgSelected.replace('{n}', n).replace('{files}', strFiles);\r\n        },\r\n        renderThumbProgress: function () {\r\n            return '<div class=\"file-thumb-progress hide\">' + this.progressTemplate.replace(/\\{percent}/g, '0') + '</div>';\r\n        },\r\n        renderFileFooter: function (caption, width) {\r\n            var self = this, config = self.fileActionSettings, footer, out, template = self.getLayoutTemplate('footer');\r\n            if (self.isUploadable) {\r\n                footer = template.replace(/\\{actions}/g, self.renderFileActions(true, true, false, false, false));\r\n                out = footer.replace(/\\{caption}/g, caption)\r\n                    .replace(/\\{width}/g, width)\r\n                    .replace(/\\{progress}/g, self.renderThumbProgress())\r\n                    .replace(/\\{indicator}/g, config.indicatorNew)\r\n                    .replace(/\\{indicatorTitle}/g, config.indicatorNewTitle);\r\n            } else {\r\n                out = template.replace(/\\{actions}/g, '')\r\n                    .replace(/\\{caption}/g, caption)\r\n                    .replace(/\\{progress}/g, '')\r\n                    .replace(/\\{width}/g, width)\r\n                    .replace(/\\{indicator}/g, '')\r\n                    .replace(/\\{indicatorTitle}/g, '');\r\n            }\r\n            out = replaceTags(out, self.previewThumbTags);\r\n            return out;\r\n        },\r\n        renderFileActions: function (showUpload, showDelete, disabled, url, key) {\r\n            if (!showUpload && !showDelete) {\r\n                return '';\r\n            }\r\n            var self = this,\r\n                vUrl = url === false ? '' : ' data-url=\"' + url + '\"',\r\n                vKey = key === false ? '' : ' data-key=\"' + key + '\"',\r\n                btnDelete = self.getLayoutTemplate('actionDelete'),\r\n                btnUpload = '',\r\n                template = self.getLayoutTemplate('actions'),\r\n                otherButtons = self.otherActionButtons.replace(/\\{dataKey}/g, vKey),\r\n                config = self.fileActionSettings,\r\n                removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;\r\n            btnDelete = btnDelete\r\n                .replace(/\\{removeClass}/g, removeClass)\r\n                .replace(/\\{removeIcon}/g, config.removeIcon)\r\n                .replace(/\\{removeTitle}/g, config.removeTitle)\r\n                .replace(/\\{dataUrl}/g, vUrl)\r\n                .replace(/\\{dataKey}/g, vKey);\r\n            if (showUpload) {\r\n                btnUpload = self.getLayoutTemplate('actionUpload')\r\n                    .replace(/\\{uploadClass}/g, config.uploadClass)\r\n                    .replace(/\\{uploadIcon}/g, config.uploadIcon)\r\n                    .replace(/\\{uploadTitle}/g, config.uploadTitle);\r\n            }\r\n            return template\r\n                .replace(/\\{delete}/g, btnDelete)\r\n                .replace(/\\{upload}/g, btnUpload)\r\n                .replace(/\\{other}/g, otherButtons);\r\n        },\r\n        setThumbStatus: function ($thumb, status) {\r\n            var self = this;\r\n            if (!self.showPreview) {\r\n                return;\r\n            }\r\n            var icon = 'indicator' + status, msg = icon + 'Title',\r\n                css = 'file-preview-' + status.toLowerCase(),\r\n                $indicator = $thumb.find('.file-upload-indicator'),\r\n                config = self.fileActionSettings;\r\n            $thumb.removeClass('file-preview-success file-preview-error file-preview-loading');\r\n            if (status === 'Error') {\r\n                $thumb.find('.kv-file-upload').attr('disabled', true);\r\n            }\r\n            $indicator.html(config[icon]);\r\n            $indicator.attr('title', config[msg]);\r\n            $thumb.addClass(css);\r\n        },\r\n        clearPreview: function () {\r\n            var self = this, $thumbs = !self.showUploadedThumbs ? self.$preview.find('.file-preview-frame') :\r\n                self.$preview.find('.file-preview-frame:not(.file-preview-success)');\r\n            $thumbs.remove();\r\n            if (!self.$preview.find('.file-preview-frame').length || !self.showPreview) {\r\n                self.resetUpload();\r\n            }\r\n            self.validateDefaultPreview();\r\n        },\r\n        initPreview: function (isInit) {\r\n            var self = this, cap = self.initialCaption || '', out;\r\n            if (!previewCache.count(self.id)) {\r\n                self.clearPreview();\r\n                if (isInit) {\r\n                    self.setCaption(cap);\r\n                } else {\r\n                    self.initCaption();\r\n                }\r\n                return;\r\n            }\r\n            out = previewCache.out(self.id);\r\n            cap = isInit && self.initialCaption ? self.initialCaption : out.caption;\r\n            self.$preview.html(out.content);\r\n            self.setCaption(cap);\r\n            if (!isEmpty(out.content)) {\r\n                self.$container.removeClass('file-input-new');\r\n            }\r\n        },\r\n        initPreviewDeletes: function () {\r\n            var self = this, deleteExtraData = self.deleteExtraData || {},\r\n                resetProgress = function () {\r\n                    var hasFiles = self.isUploadable ? previewCache.count(self.id) : self.$element.get(0).files.length;\r\n                    if (self.$preview.find('.kv-file-remove').length === 0 && !hasFiles) {\r\n                        self.reset();\r\n                        self.initialCaption = '';\r\n                    }\r\n                };\r\n\r\n            self.$preview.find('.kv-file-remove').each(function () {\r\n                var $el = $(this), vUrl = $el.data('url') || self.deleteUrl, vKey = $el.data('key');\r\n                if (isEmpty(vUrl) || vKey === undefined) {\r\n                    return;\r\n                }\r\n                var $frame = $el.closest('.file-preview-frame'), cache = previewCache.data[self.id],\r\n                    settings, params, index = $frame.data('fileindex'), config, extraData;\r\n                index = parseInt(index.replace('init_', ''));\r\n                config = isEmpty(cache.config) && isEmpty(cache.config[index]) ? null : cache.config[index];\r\n                extraData = isEmpty(config) || isEmpty(config.extra) ? deleteExtraData : config.extra;\r\n                if (typeof extraData === \"function\") {\r\n                    extraData = extraData();\r\n                }\r\n                params = {id: $el.attr('id'), key: vKey, extra: extraData};\r\n                settings = $.extend({\r\n                    url: vUrl,\r\n                    type: 'POST',\r\n                    dataType: 'json',\r\n                    data: $.extend({key: vKey}, extraData),\r\n                    beforeSend: function (jqXHR) {\r\n                        self.ajaxAborted = false;\r\n                        self.raise('filepredelete', [vKey, jqXHR, extraData]);\r\n                        if (self.ajaxAborted) {\r\n                            jqXHR.abort();\r\n                        } else {\r\n                            addCss($frame, 'file-uploading');\r\n                            addCss($el, 'disabled');\r\n                        }\r\n                    },\r\n                    success: function (data, textStatus, jqXHR) {\r\n                        var n, cap;\r\n                        if (isEmpty(data) || isEmpty(data.error)) {\r\n                            previewCache.unset(self.id, index);\r\n                            n = previewCache.count(self.id);\r\n                            cap = n > 0 ? self.getMsgSelected(n) : '';\r\n                            self.raise('filedeleted', [vKey, jqXHR, extraData]);\r\n                            self.setCaption(cap);\r\n                        } else {\r\n                            params.jqXHR = jqXHR;\r\n                            params.response = data;\r\n                            self.showError(data.error, params, 'filedeleteerror');\r\n                            $frame.removeClass('file-uploading');\r\n                            $el.removeClass('disabled');\r\n                            resetProgress();\r\n                            return;\r\n                        }\r\n                        $frame.removeClass('file-uploading').addClass('file-deleted');\r\n                        $frame.fadeOut('slow', function () {\r\n                            self.clearObjects($frame);\r\n                            $frame.remove();\r\n                            resetProgress();\r\n                            if (!n && self.getFileStack().length === 0) {\r\n                                self.setCaption('');\r\n                                self.reset();\r\n                            }\r\n                        });\r\n                    },\r\n                    error: function (jqXHR, textStatus, errorThrown) {\r\n                        var errMsg = self.parseError(jqXHR, errorThrown);\r\n                        params.jqXHR = jqXHR;\r\n                        params.response = {};\r\n                        self.showError(errMsg, params, 'filedeleteerror');\r\n                        $frame.removeClass('file-uploading');\r\n                        resetProgress();\r\n                    }\r\n                }, self.ajaxDeleteSettings);\r\n                handler($el, 'click', function () {\r\n                    if (!self.validateMinCount()) {\r\n                        return false;\r\n                    }\r\n                    $.ajax(settings);\r\n                });\r\n            });\r\n        },\r\n        clearObjects: function ($el) {\r\n            $el.find('video audio').each(function () {\r\n                this.pause();\r\n                $(this).remove();\r\n            });\r\n            $el.find('img object div').each(function () {\r\n                $(this).remove();\r\n            });\r\n        },\r\n        clearFileInput: function () {\r\n            var self = this, $el = self.$element, $srcFrm, $tmpFrm, $tmpEl;\r\n            if (isEmpty($el.val())) {\r\n                return;\r\n            }\r\n            // Fix for IE ver < 11, that does not clear file inputs\r\n            // Requires a sequence of steps to prevent IE crashing but\r\n            // still allow clearing of the file input.\r\n            if (self.isIE9 || self.isIE10) {\r\n                $srcFrm = $el.closest('form');\r\n                $tmpFrm = $(document.createElement('form'));\r\n                $tmpEl = $(document.createElement('div'));\r\n                $el.before($tmpEl);\r\n                if ($srcFrm.length) {\r\n                    $srcFrm.after($tmpFrm);\r\n                } else {\r\n                    $tmpEl.after($tmpFrm);\r\n                }\r\n                $tmpFrm.append($el).trigger('reset');\r\n                $tmpEl.before($el).remove();\r\n                $tmpFrm.remove();\r\n            } else { // normal input clear behavior for other sane browsers\r\n                $el.val('');\r\n            }\r\n            self.fileInputCleared = true;\r\n        },\r\n        resetUpload: function () {\r\n            var self = this;\r\n            self.uploadCache = {content: [], config: [], tags: [], append: true};\r\n            self.uploadCount = 0;\r\n            self.uploadStatus = {};\r\n            self.uploadLog = [];\r\n            self.uploadAsyncCount = 0;\r\n            self.loadedImages = [];\r\n            self.totalImagesCount = 0;\r\n            self.$btnUpload.removeAttr('disabled');\r\n            self.setProgress(0);\r\n            addCss(self.$progress, 'hide');\r\n            self.resetErrors(false);\r\n            self.ajaxAborted = false;\r\n            self.ajaxRequests = [];\r\n            self.resetCanvas();\r\n        },\r\n        resetCanvas: function () {\r\n            var self = this;\r\n            if (self.canvas && self.imageCanvasContext) {\r\n                self.imageCanvasContext.clearRect(0, 0, self.canvas.width, self.canvas.height);\r\n            }\r\n        },\r\n        cancel: function () {\r\n            var self = this, xhr = self.ajaxRequests, len = xhr.length, i;\r\n            if (len > 0) {\r\n                for (i = 0; i < len; i += 1) {\r\n                    self.cancelling = true;\r\n                    xhr[i].abort();\r\n                }\r\n            }\r\n            self.getThumbs().each(function () {\r\n                var $thumb = $(this), ind = $thumb.attr('data-fileindex');\r\n                $thumb.removeClass('file-uploading');\r\n                if (self.filestack[ind] !== undefined) {\r\n                    $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');\r\n                    $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');\r\n                }\r\n                self.unlock();\r\n            });\r\n        },\r\n        cleanMemory: function ($thumb) {\r\n            var data = $thumb.is('img') ? $thumb.attr('src') : $thumb.find('source').attr('src');\r\n            /** @namespace objUrl.revokeObjectURL */\r\n            objUrl.revokeObjectURL(data);\r\n        },\r\n        hasInitialPreview: function () {\r\n            var self = this;\r\n            return !self.overwriteInitial && previewCache.count(self.id);\r\n        },\r\n        clear: function () {\r\n            var self = this, cap;\r\n            self.$btnUpload.removeAttr('disabled');\r\n            self.getThumbs().find('video,audio,img').each(function () {\r\n                self.cleanMemory($(this));\r\n            });\r\n            self.resetUpload();\r\n            self.clearStack();\r\n            self.clearFileInput();\r\n            self.resetErrors(true);\r\n            self.raise('fileclear');\r\n            if (self.hasInitialPreview()) {\r\n                self.showFileIcon();\r\n                self.resetPreview();\r\n                self.initPreviewDeletes();\r\n                self.$container.removeClass('file-input-new');\r\n            } else {\r\n                self.getThumbs().each(function () {\r\n                    self.clearObjects($(this));\r\n                });\r\n                if (self.isUploadable) {\r\n                    previewCache.data[self.id] = {};\r\n                }\r\n                self.$preview.html('');\r\n                cap = (!self.overwriteInitial && self.initialCaption.length > 0) ? self.initialCaption : '';\r\n                self.setCaption(cap);\r\n                self.$caption.attr('title', '');\r\n                addCss(self.$container, 'file-input-new');\r\n                self.validateDefaultPreview();\r\n            }\r\n            if (self.$container.find('.file-preview-frame').length === 0) {\r\n                if (!self.initCaption()) {\r\n                    self.$captionContainer.find('.kv-caption-icon').hide();\r\n                }\r\n            }\r\n            self.hideFileIcon();\r\n            self.raise('filecleared');\r\n            self.$captionContainer.focus();\r\n            self.setFileDropZoneTitle();\r\n        },\r\n        resetPreview: function () {\r\n            var self = this, out, cap;\r\n            if (previewCache.count(self.id)) {\r\n                out = previewCache.out(self.id);\r\n                self.$preview.html(out.content);\r\n                cap = self.initialCaption ? self.initialCaption : out.caption;\r\n                self.setCaption(cap);\r\n            } else {\r\n                self.clearPreview();\r\n                self.initCaption();\r\n            }\r\n        },\r\n        clearDefaultPreview: function () {\r\n            var self = this;\r\n            self.$preview.find('.file-default-preview').remove();\r\n        },\r\n        validateDefaultPreview: function () {\r\n            var self = this;\r\n            if (!self.showPreview || isEmpty(self.defaultPreviewContent)) {\r\n                return;\r\n            }\r\n            self.$preview.html('<div class=\"file-default-preview\">' + self.defaultPreviewContent + '</div>');\r\n            self.$container.removeClass('file-input-new');\r\n        },\r\n        resetPreviewThumbs: function (isAjax) {\r\n            var self = this, out;\r\n            if (isAjax) {\r\n                self.clearPreview();\r\n                self.clearStack();\r\n                return;\r\n            }\r\n            if (self.hasInitialPreview()) {\r\n                out = previewCache.out(self.id);\r\n                self.$preview.html(out.content);\r\n                self.setCaption(out.caption);\r\n                self.initPreviewDeletes();\r\n            } else {\r\n                self.clearPreview();\r\n            }\r\n        },\r\n        reset: function () {\r\n            var self = this;\r\n            self.resetPreview();\r\n            self.$container.find('.fileinput-filename').text('');\r\n            self.raise('filereset');\r\n            addCss(self.$container, 'file-input-new');\r\n            if (self.$preview.find('.file-preview-frame').length || self.isUploadable && self.dropZoneEnabled) {\r\n                self.$container.removeClass('file-input-new');\r\n            }\r\n            self.setFileDropZoneTitle();\r\n            self.clearStack();\r\n            self.formdata = {};\r\n        },\r\n        disable: function () {\r\n            var self = this;\r\n            self.isDisabled = true;\r\n            self.raise('filedisabled');\r\n            self.$element.attr('disabled', 'disabled');\r\n            self.$container.find(\".kv-fileinput-caption\").addClass(\"file-caption-disabled\");\r\n            self.$container.find(\".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button\").attr(\"disabled\",\r\n                true);\r\n            self.initDragDrop();\r\n        },\r\n        enable: function () {\r\n            var self = this;\r\n            self.isDisabled = false;\r\n            self.raise('fileenabled');\r\n            self.$element.removeAttr('disabled');\r\n            self.$container.find(\".kv-fileinput-caption\").removeClass(\"file-caption-disabled\");\r\n            self.$container.find(\".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button\").removeAttr(\"disabled\");\r\n            self.initDragDrop();\r\n        },\r\n        getThumbs: function (css) {\r\n            css = css || '';\r\n            return this.$preview.find('.file-preview-frame:not(.file-preview-initial)' + css);\r\n        },\r\n        getExtraData: function (previewId, index) {\r\n            var self = this, data = self.uploadExtraData;\r\n            if (typeof self.uploadExtraData === \"function\") {\r\n                data = self.uploadExtraData(previewId, index);\r\n            }\r\n            return data;\r\n        },\r\n        uploadExtra: function (previewId, index) {\r\n            var self = this, data = self.getExtraData(previewId, index);\r\n            if (data.length === 0) {\r\n                return;\r\n            }\r\n            $.each(data, function (key, value) {\r\n                self.formdata.append(key, value);\r\n            });\r\n        },\r\n        setAsyncUploadStatus: function (previewId, pct, total) {\r\n            var self = this, sum = 0;\r\n            self.setProgress(pct, $('#' + previewId).find('.file-thumb-progress'));\r\n            self.uploadStatus[previewId] = pct;\r\n            $.each(self.uploadStatus, function (key, value) {\r\n                sum += value;\r\n            });\r\n            self.setProgress(Math.ceil(sum / total));\r\n\r\n        },\r\n        initXhr: function (xhrobj, previewId, fileCount) {\r\n            var self = this;\r\n            if (xhrobj.upload) {\r\n                xhrobj.upload.addEventListener('progress', function (event) {\r\n                    var pct = 0, position = event.loaded || event.position, total = event.total;\r\n                    /** @namespace event.lengthComputable */\r\n                    if (event.lengthComputable) {\r\n                        pct = Math.ceil(position / total * 100);\r\n                    }\r\n                    if (previewId) {\r\n                        self.setAsyncUploadStatus(previewId, pct, fileCount);\r\n                    } else {\r\n                        self.setProgress(Math.ceil(pct));\r\n                    }\r\n                }, false);\r\n            }\r\n            return xhrobj;\r\n        },\r\n        ajaxSubmit: function (fnBefore, fnSuccess, fnComplete, fnError, previewId, index) {\r\n            var self = this, settings;\r\n            self.raise('filepreajax', [previewId, index]);\r\n            self.uploadExtra(previewId, index);\r\n            settings = $.extend({\r\n                xhr: function () {\r\n                    var xhrobj = $.ajaxSettings.xhr();\r\n                    return self.initXhr(xhrobj, previewId, self.getFileStack().length);\r\n                },\r\n                url: self.uploadUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: self.formdata,\r\n                cache: false,\r\n                processData: false,\r\n                contentType: false,\r\n                beforeSend: fnBefore,\r\n                success: fnSuccess,\r\n                complete: fnComplete,\r\n                error: fnError\r\n            }, self.ajaxSettings);\r\n            self.ajaxRequests.push($.ajax(settings));\r\n        },\r\n        initUploadSuccess: function (out, $thumb, allFiles) {\r\n            var self = this, append, data, index, $newThumb, content, config, tags, i;\r\n            if (!self.showPreview || typeof out !== 'object' || $.isEmptyObject(out)) {\r\n                return;\r\n            }\r\n            if (out.initialPreview !== undefined && out.initialPreview.length > 0) {\r\n                self.hasInitData = true;\r\n                content = out.initialPreview || [];\r\n                config = out.initialPreviewConfig || [];\r\n                tags = out.initialPreviewThumbTags || [];\r\n                append = out.append === undefined || out.append ? true : false;\r\n                self.overwriteInitial = false;\r\n                if ($thumb !== undefined) {\r\n                    if (!allFiles) {\r\n                        index = previewCache.add(self.id, content, config[0], tags[0], append);\r\n                        data = previewCache.get(self.id, index, false);\r\n                        $newThumb = $(data).hide();\r\n                        $thumb.after($newThumb).fadeOut('slow', function () {\r\n                            $newThumb.fadeIn('slow').css('display:inline-block');\r\n                            self.initPreviewDeletes();\r\n                            self.clearFileInput();\r\n                            $thumb.remove();\r\n                        });\r\n                    } else {\r\n                        i = $thumb.attr('data-fileindex');\r\n                        self.uploadCache.content[i] = content[0];\r\n                        self.uploadCache.config[i] = config[0];\r\n                        self.uploadCache.tags[i] = tags[0];\r\n                        self.uploadCache.append = append;\r\n                    }\r\n                } else {\r\n                    previewCache.set(self.id, content, config, tags, append);\r\n                    self.initPreview();\r\n                    self.initPreviewDeletes();\r\n                }\r\n            }\r\n        },\r\n        initSuccessThumbs: function () {\r\n            var self = this;\r\n            if (!self.showPreview) {\r\n                return;\r\n            }\r\n            self.getThumbs('.file-preview-success').each(function () {\r\n                var $thumb = $(this), $remove = $thumb.find('.kv-file-remove');\r\n                $remove.removeAttr('disabled');\r\n                handler($remove, 'click', function () {\r\n                    var out = self.raise('filesuccessremove', [$thumb.attr('id'), $thumb.data('fileindex')]);\r\n                    self.cleanMemory($thumb);\r\n                    if (out === false) {\r\n                        return;\r\n                    }\r\n                    $thumb.fadeOut('slow', function () {\r\n                        $thumb.remove();\r\n                        if (!self.$preview.find('.file-preview-frame').length) {\r\n                            self.reset();\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        },\r\n        checkAsyncComplete: function () {\r\n            var self = this, previewId, i;\r\n            for (i = 0; i < self.filestack.length; i++) {\r\n                if (self.filestack[i]) {\r\n                    previewId = self.previewInitId + \"-\" + i;\r\n                    if ($.inArray(previewId, self.uploadLog) === -1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return (self.uploadAsyncCount === self.uploadLog.length);\r\n        },\r\n        uploadSingle: function (i, files, allFiles) {\r\n            var self = this, total = self.getFileStack().length, formdata = new FormData(), outData,\r\n                previewId = self.previewInitId + \"-\" + i, $thumb, chkComplete, $btnUpload, $btnDelete,\r\n                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),\r\n                fnBefore, fnSuccess, fnComplete, fnError, updateUploadLog, params = {id: previewId, index: i};\r\n            self.formdata = formdata;\r\n            if (self.showPreview) {\r\n                $thumb = $('#' + previewId + ':not(.file-preview-initial)');\r\n                $btnUpload = $thumb.find('.kv-file-upload');\r\n                $btnDelete = $thumb.find('.kv-file-remove');\r\n                $('#' + previewId).find('.file-thumb-progress').removeClass('hide');\r\n            }\r\n            if (total === 0 || !hasPostData || ($btnUpload && $btnUpload.hasClass('disabled')) || self.abort(params)) {\r\n                return;\r\n            }\r\n            updateUploadLog = function (i, previewId) {\r\n                self.updateStack(i, undefined);\r\n                self.uploadLog.push(previewId);\r\n                if (self.checkAsyncComplete()) {\r\n                    self.fileBatchCompleted = true;\r\n                }\r\n            };\r\n            chkComplete = function () {\r\n                if (!self.fileBatchCompleted) {\r\n                    return;\r\n                }\r\n                setTimeout(function () {\r\n                    if (self.showPreview) {\r\n                        previewCache.set(\r\n                            self.id,\r\n                            self.uploadCache.content,\r\n                            self.uploadCache.config,\r\n                            self.uploadCache.tags,\r\n                            self.uploadCache.append\r\n                        );\r\n                        if (self.hasInitData) {\r\n                            self.initPreview();\r\n                            self.initPreviewDeletes();\r\n                        }\r\n                    }\r\n                    self.unlock();\r\n                    self.clearFileInput();\r\n                    self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);\r\n                    self.uploadCount = 0;\r\n                    self.uploadStatus = {};\r\n                    self.uploadLog = [];\r\n                    self.setProgress(100);\r\n                }, 100);\r\n            };\r\n            fnBefore = function (jqXHR) {\r\n                outData = self.getOutData(jqXHR);\r\n                self.fileBatchCompleted = false;\r\n                if (self.showPreview) {\r\n                    if (!$thumb.hasClass('file-preview-success')) {\r\n                        self.setThumbStatus($thumb, 'Loading');\r\n                        addCss($thumb, 'file-uploading');\r\n                    }\r\n                    $btnUpload.attr('disabled', true);\r\n                    $btnDelete.attr('disabled', true);\r\n                }\r\n                if (!allFiles) {\r\n                    self.lock();\r\n                }\r\n                self.raise('filepreupload', [outData, previewId, i]);\r\n                params = $.extend(params, outData);\r\n                if (self.abort(params)) {\r\n                    jqXHR.abort();\r\n                    self.setProgress(100);\r\n                }\r\n            };\r\n            fnSuccess = function (data, textStatus, jqXHR) {\r\n                outData = self.getOutData(jqXHR, data);\r\n                params = $.extend(params, outData);\r\n                setTimeout(function () {\r\n                    if (isEmpty(data) || isEmpty(data.error)) {\r\n                        if (self.showPreview) {\r\n                            self.setThumbStatus($thumb, 'Success');\r\n                            $btnUpload.hide();\r\n                            self.initUploadSuccess(data, $thumb, allFiles);\r\n                        }\r\n                        self.raise('fileuploaded', [outData, previewId, i]);\r\n                        if (!allFiles) {\r\n                            self.updateStack(i, undefined);\r\n                        } else {\r\n                            updateUploadLog(i, previewId);\r\n                        }\r\n                    } else {\r\n                        self.setThumbStatus($thumb, 'Error');\r\n                        self.showUploadError(data.error, params);\r\n                        if (allFiles) {\r\n                            updateUploadLog(i, previewId);\r\n                        }\r\n                    }\r\n                }, 100);\r\n            };\r\n            fnComplete = function () {\r\n                setTimeout(function () {\r\n                    if (self.showPreview) {\r\n                        $btnUpload.removeAttr('disabled');\r\n                        $btnDelete.removeAttr('disabled');\r\n                        $thumb.removeClass('file-uploading');\r\n                    }\r\n                    if (!allFiles) {\r\n                        self.unlock(false);\r\n                        self.clearFileInput();\r\n                    } else {\r\n                        chkComplete();\r\n                    }\r\n                    self.initSuccessThumbs();\r\n                }, 100);\r\n            };\r\n            fnError = function (jqXHR, textStatus, errorThrown) {\r\n                var errMsg = self.parseError(jqXHR, errorThrown, (allFiles ? files[i].name : null));\r\n                setTimeout(function () {\r\n                    if (allFiles) {\r\n                        updateUploadLog(i, previewId);\r\n                    }\r\n                    self.uploadStatus[previewId] = 100;\r\n                    self.setThumbStatus($thumb, 'Error');\r\n                    params = $.extend(params, self.getOutData(jqXHR));\r\n                    self.showUploadError(errMsg, params);\r\n                }, 100);\r\n            };\r\n            formdata.append(self.uploadFileAttr, files[i], self.filenames[i]);\r\n            formdata.append('file_id', i);\r\n            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, previewId, i);\r\n        },\r\n        uploadBatch: function () {\r\n            var self = this, files = self.filestack, total = files.length, params = {},\r\n                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),\r\n                setAllUploaded, fnBefore, fnSuccess, fnComplete, fnError;\r\n            self.formdata = new FormData();\r\n            if (total === 0 || !hasPostData || self.abort(params)) {\r\n                return;\r\n            }\r\n            setAllUploaded = function () {\r\n                $.each(files, function (key) {\r\n                    self.updateStack(key, undefined);\r\n                });\r\n                self.clearFileInput();\r\n            };\r\n            fnBefore = function (jqXHR) {\r\n                self.lock();\r\n                var outData = self.getOutData(jqXHR);\r\n                if (self.showPreview) {\r\n                    self.getThumbs().each(function () {\r\n                        var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload'),\r\n                            $btnDelete = $thumb.find('.kv-file-remove');\r\n                        if (!$thumb.hasClass('file-preview-success')) {\r\n                            self.setThumbStatus($thumb, 'Loading');\r\n                            addCss($thumb, 'file-uploading');\r\n                        }\r\n                        $btnUpload.attr('disabled', true);\r\n                        $btnDelete.attr('disabled', true);\r\n                    });\r\n                }\r\n                self.raise('filebatchpreupload', [outData]);\r\n                if (self.abort(outData)) {\r\n                    jqXHR.abort();\r\n                    self.setProgress(100);\r\n                }\r\n            };\r\n            fnSuccess = function (data, textStatus, jqXHR) {\r\n                /** @namespace data.errorkeys */\r\n                var outData = self.getOutData(jqXHR, data), $thumbs = self.getThumbs(), key = 0,\r\n                    keys = isEmpty(data) || isEmpty(data.errorkeys) ? [] : data.errorkeys;\r\n                if (isEmpty(data) || isEmpty(data.error)) {\r\n                    self.raise('filebatchuploadsuccess', [outData]);\r\n                    setAllUploaded();\r\n                    if (self.showPreview) {\r\n                        $thumbs.each(function () {\r\n                            var $thumb = $(this), $btnUpload = $thumb.find('.kv-file-upload');\r\n                            $thumb.find('.kv-file-upload').hide();\r\n                            self.setThumbStatus($thumb, 'Success');\r\n                            $thumb.removeClass('file-uploading');\r\n                            $btnUpload.removeAttr('disabled');\r\n                        });\r\n                        self.initUploadSuccess(data);\r\n                    } else {\r\n                        self.reset();\r\n                    }\r\n                } else {\r\n                    if (self.showPreview) {\r\n                        $thumbs.each(function () {\r\n                            var $thumb = $(this), $btnDelete = $thumb.find('.kv-file-remove'),\r\n                                $btnUpload = $thumb.find('.kv-file-upload');\r\n                            $thumb.removeClass('file-uploading');\r\n                            $btnUpload.removeAttr('disabled');\r\n                            $btnDelete.removeAttr('disabled');\r\n                            if (keys.length === 0) {\r\n                                self.setThumbStatus($thumb, 'Error');\r\n                                return;\r\n                            }\r\n                            if ($.inArray(key, keys) !== -1) {\r\n                                self.setThumbStatus($thumb, 'Error');\r\n                            } else {\r\n                                $thumb.find('.kv-file-upload').hide();\r\n                                self.setThumbStatus($thumb, 'Success');\r\n                                self.updateStack(key, undefined);\r\n                            }\r\n                            key++;\r\n                        });\r\n                        self.initUploadSuccess(data);\r\n                    }\r\n                    self.showUploadError(data.error, outData, 'filebatchuploaderror');\r\n                }\r\n            };\r\n            fnComplete = function () {\r\n                self.setProgress(100);\r\n                self.unlock();\r\n                self.initSuccessThumbs();\r\n                self.clearFileInput();\r\n                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);\r\n            };\r\n            fnError = function (jqXHR, textStatus, errorThrown) {\r\n                var outData = self.getOutData(jqXHR), errMsg = self.parseError(jqXHR, errorThrown);\r\n                self.showUploadError(errMsg, outData, 'filebatchuploaderror');\r\n                self.uploadFileCount = total - 1;\r\n                if (!self.showPreview) {\r\n                    return;\r\n                }\r\n                self.getThumbs().each(function () {\r\n                    var $thumb = $(this), key = $thumb.attr('data-fileindex');\r\n                    $thumb.removeClass('file-uploading');\r\n                    if (self.filestack[key] !== undefined) {\r\n                        self.setThumbStatus($thumb, 'Error');\r\n                    }\r\n                });\r\n                self.getThumbs().removeClass('file-uploading');\r\n                self.getThumbs(' .kv-file-upload').removeAttr('disabled');\r\n                self.getThumbs(' .kv-file-delete').removeAttr('disabled');\r\n            };\r\n            $.each(files, function (key, data) {\r\n                if (!isEmpty(files[key])) {\r\n                    self.formdata.append(self.uploadFileAttr, data, self.filenames[key]);\r\n                }\r\n            });\r\n            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);\r\n        },\r\n        uploadExtraOnly: function () {\r\n            var self = this, params = {}, fnBefore, fnSuccess, fnComplete, fnError;\r\n            self.formdata = new FormData();\r\n            if (self.abort(params)) {\r\n                return;\r\n            }\r\n            fnBefore = function (jqXHR) {\r\n                self.lock();\r\n                var outData = self.getOutData(jqXHR);\r\n                self.raise('filebatchpreupload', [outData]);\r\n                self.setProgress(50);\r\n                params.data = outData;\r\n                params.xhr = jqXHR;\r\n                if (self.abort(params)) {\r\n                    jqXHR.abort();\r\n                    self.setProgress(100);\r\n                }\r\n            };\r\n            fnSuccess = function (data, textStatus, jqXHR) {\r\n                var outData = self.getOutData(jqXHR, data);\r\n                if (isEmpty(data) || isEmpty(data.error)) {\r\n                    self.raise('filebatchuploadsuccess', [outData]);\r\n                    self.clearFileInput();\r\n                    self.initUploadSuccess(data);\r\n                } else {\r\n                    self.showUploadError(data.error, outData, 'filebatchuploaderror');\r\n                }\r\n            };\r\n            fnComplete = function () {\r\n                self.setProgress(100);\r\n                self.unlock();\r\n                self.clearFileInput();\r\n                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);\r\n            };\r\n            fnError = function (jqXHR, textStatus, errorThrown) {\r\n                var outData = self.getOutData(jqXHR), errMsg = self.parseError(jqXHR, errorThrown);\r\n                params.data = outData;\r\n                self.showUploadError(errMsg, outData, 'filebatchuploaderror');\r\n            };\r\n            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);\r\n        },\r\n        upload: function () {\r\n            var self = this, totLen = self.getFileStack().length, params = {},\r\n                i, outData, len, hasExtraData = !$.isEmptyObject(self.getExtraData());\r\n            if (self.minFileCount > 0 && self.getFileCount(totLen) < self.minFileCount) {\r\n                self.noFilesError(params);\r\n                return;\r\n            }\r\n            if (!self.isUploadable || self.isDisabled || (totLen === 0 && !hasExtraData)) {\r\n                return;\r\n            }\r\n            self.resetUpload();\r\n            self.$progress.removeClass('hide');\r\n            self.uploadCount = 0;\r\n            self.uploadStatus = {};\r\n            self.uploadLog = [];\r\n            self.lock();\r\n            self.setProgress(2);\r\n            if (totLen === 0 && hasExtraData) {\r\n                self.uploadExtraOnly();\r\n                return;\r\n            }\r\n            len = self.filestack.length;\r\n            self.hasInitData = false;\r\n            if (self.uploadAsync) {\r\n                outData = self.getOutData();\r\n                self.raise('filebatchpreupload', [outData]);\r\n                self.fileBatchCompleted = false;\r\n                self.uploadCache = {content: [], config: [], tags: [], append: true};\r\n                self.uploadAsyncCount = self.getFileStack().length;\r\n                for (i = 0; i < len; i++) {\r\n                    self.uploadCache.content[i] = null;\r\n                    self.uploadCache.config[i] = null;\r\n                    self.uploadCache.tags[i] = null;\r\n                }\r\n                for (i = 0; i < len; i++) {\r\n                    if (self.filestack[i] !== undefined) {\r\n                        self.uploadSingle(i, self.filestack, true);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            self.uploadBatch();\r\n        },\r\n        initFileActions: function () {\r\n            var self = this;\r\n            if (!self.showPreview) {\r\n                return;\r\n            }\r\n            self.$preview.find('.kv-file-remove').each(function () {\r\n                var $el = $(this), $frame = $el.closest('.file-preview-frame'), hasError,\r\n                    id = $frame.attr('id'), ind = $frame.attr('data-fileindex'), n, cap, status;\r\n                handler($el, 'click', function () {\r\n                    status = self.raise('filepreremove', [id, ind]);\r\n                    if (status === false || !self.validateMinCount()) {\r\n                        return false;\r\n                    }\r\n                    hasError = $frame.hasClass('file-preview-error');\r\n                    self.cleanMemory($frame);\r\n                    $frame.fadeOut('slow', function () {\r\n                        self.updateStack(ind, undefined);\r\n                        self.clearObjects($frame);\r\n                        $frame.remove();\r\n                        if (id && hasError) {\r\n                            self.$errorContainer.find('li[data-file-id=\"' + id + '\"]').fadeOut('fast', function () {\r\n                                $(this).remove();\r\n                                if (!self.errorsExist()) {\r\n                                    self.resetErrors();\r\n                                }\r\n                            });\r\n                        }\r\n                        var filestack = self.getFileStack(true), len = filestack.length, chk = previewCache.count(self.id),\r\n                            hasThumb = self.showPreview && self.$preview.find('.file-preview-frame').length;\r\n                        self.clearFileInput();\r\n                        if (len === 0 && chk === 0 && !hasThumb) {\r\n                            self.reset();\r\n                        } else {\r\n                            n = chk + len;\r\n                            cap = n > 1 ? self.getMsgSelected(n) : (filestack[0] ? self.getFileNames()[0] : '');\r\n                            self.setCaption(cap);\r\n                        }\r\n                        self.raise('fileremoved', [id, ind]);\r\n                    });\r\n                });\r\n            });\r\n            self.$preview.find('.kv-file-upload').each(function () {\r\n                var $el = $(this);\r\n                handler($el, 'click', function () {\r\n                    var $frame = $el.closest('.file-preview-frame'),\r\n                        ind = $frame.attr('data-fileindex');\r\n                    if (!$frame.hasClass('file-preview-error')) {\r\n                        self.uploadSingle(ind, self.filestack, false);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        hideFileIcon: function () {\r\n            if (this.overwriteInitial) {\r\n                this.$captionContainer.find('.kv-caption-icon').hide();\r\n            }\r\n        },\r\n        showFileIcon: function () {\r\n            this.$captionContainer.find('.kv-caption-icon').show();\r\n        },\r\n        addError: function (msg) {\r\n            var self = this, $error = self.$errorContainer;\r\n            if (msg && $error.length) {\r\n                $error.html(self.errorCloseButton + msg);\r\n                $error.find('.kv-error-close').off('click').on('click', function () {\r\n                    $error.fadeOut('slow');\r\n                });\r\n            }\r\n        },\r\n        resetErrors: function (fade) {\r\n            var self = this, $error = self.$errorContainer;\r\n            self.isError = false;\r\n            self.$container.removeClass('has-error');\r\n            $error.html('');\r\n            if (fade) {\r\n                $error.fadeOut('slow');\r\n            } else {\r\n                $error.hide();\r\n            }\r\n        },\r\n        showFolderError: function (folders) {\r\n            var self = this, $error = self.$errorContainer;\r\n            if (!folders) {\r\n                return;\r\n            }\r\n            self.addError(self.msgFoldersNotAllowed.replace(/\\{n}/g, folders));\r\n            $error.fadeIn(800);\r\n            addCss(self.$container, 'has-error');\r\n            self.raise('filefoldererror', [folders]);\r\n        },\r\n        showUploadError: function (msg, params, event) {\r\n            var self = this, $error = self.$errorContainer, ev = event || 'fileuploaderror',\r\n                e = params && params.id ? '<li data-file-id=\"' + params.id + '\">' + msg + '</li>' : '<li>' + msg + '</li>';\r\n            if ($error.find('ul').length === 0) {\r\n                self.addError('<ul>' + e + '</ul>');\r\n            } else {\r\n                $error.find('ul').append(e);\r\n            }\r\n            $error.fadeIn(800);\r\n            self.raise(ev, [params]);\r\n            self.$container.removeClass('file-input-new');\r\n            addCss(self.$container, 'has-error');\r\n            return true;\r\n        },\r\n        showError: function (msg, params, event) {\r\n            var self = this, $error = self.$errorContainer, ev = event || 'fileerror';\r\n            params = params || {};\r\n            params.reader = self.reader;\r\n            self.addError(msg);\r\n            $error.fadeIn(800);\r\n            self.raise(ev, [params]);\r\n            if (!self.isUploadable) {\r\n                self.clearFileInput();\r\n            }\r\n            self.$container.removeClass('file-input-new');\r\n            addCss(self.$container, 'has-error');\r\n            self.$btnUpload.attr('disabled', true);\r\n            return true;\r\n        },\r\n        errorHandler: function (evt, caption) {\r\n            var self = this, err = evt.target.error;\r\n            /** @namespace err.NOT_FOUND_ERR */\r\n            /** @namespace err.SECURITY_ERR */\r\n            /** @namespace err.NOT_READABLE_ERR */\r\n            if (err.code === err.NOT_FOUND_ERR) {\r\n                self.showError(self.msgFileNotFound.replace('{name}', caption));\r\n            } else if (err.code === err.SECURITY_ERR) {\r\n                self.showError(self.msgFileSecured.replace('{name}', caption));\r\n            } else if (err.code === err.NOT_READABLE_ERR) {\r\n                self.showError(self.msgFileNotReadable.replace('{name}', caption));\r\n            } else if (err.code === err.ABORT_ERR) {\r\n                self.showError(self.msgFilePreviewAborted.replace('{name}', caption));\r\n            } else {\r\n                self.showError(self.msgFilePreviewError.replace('{name}', caption));\r\n            }\r\n        },\r\n        parseFileType: function (file) {\r\n            var self = this, isValid, vType, cat, i;\r\n            for (i = 0; i < defaultPreviewTypes.length; i += 1) {\r\n                cat = defaultPreviewTypes[i];\r\n                isValid = isSet(cat, self.fileTypeSettings) ? self.fileTypeSettings[cat] : defaultFileTypeSettings[cat];\r\n                vType = isValid(file.type, file.name) ? cat : '';\r\n                if (!isEmpty(vType)) {\r\n                    return vType;\r\n                }\r\n            }\r\n            return 'other';\r\n        },\r\n        previewDefault: function (file, previewId, isDisabled) {\r\n            if (!this.showPreview) {\r\n                return;\r\n            }\r\n            var self = this, frameClass = '', fname = file ? file.name : '',\r\n                /** @namespace objUrl.createObjectURL */\r\n                data = objUrl.createObjectURL(file), ind = previewId.slice(previewId.lastIndexOf('-') + 1),\r\n                config = self.previewSettings.other || defaultPreviewSettings.other,\r\n                footer = self.renderFileFooter(file.name, config.width),\r\n                previewOtherTemplate = self.parseFilePreviewIcon(self.getPreviewTemplate('other'), fname);\r\n            if (isDisabled === true) {\r\n                if (!self.isUploadable) {\r\n                    footer += '<div class=\"file-other-error\" title=\"' + self.fileActionSettings.indicatorErrorTitle +\r\n                        '\">' + self.fileActionSettings.indicatorError + '</div>';\r\n                }\r\n            }\r\n            self.clearDefaultPreview();\r\n            self.$preview.append(\"\\n\" + previewOtherTemplate\r\n                    .replace(/\\{previewId}/g, previewId)\r\n                    .replace(/\\{frameClass}/g, frameClass)\r\n                    .replace(/\\{fileindex}/g, ind)\r\n                    .replace(/\\{caption}/g, self.slug(file.name))\r\n                    .replace(/\\{width}/g, config.width)\r\n                    .replace(/\\{height}/g, config.height)\r\n                    .replace(/\\{type}/g, file.type)\r\n                    .replace(/\\{data}/g, data)\r\n                    .replace(/\\{footer}/g, footer));\r\n            if (isDisabled === true && self.isUploadable) {\r\n                self.setThumbStatus($('#' + previewId), 'Error');\r\n            }\r\n        },\r\n        previewFile: function (i, file, theFile, previewId, data) {\r\n            if (!this.showPreview) {\r\n                return;\r\n            }\r\n            var self = this, cat = self.parseFileType(file), fname = file ? file.name : '', caption = self.slug(fname),\r\n                content, strText, types = self.allowedPreviewTypes, mimes = self.allowedPreviewMimeTypes,\r\n                tmplt = self.getPreviewTemplate(cat), chkTypes = types && types.indexOf(cat) >= 0, id,\r\n                config = isSet(cat, self.previewSettings) ? self.previewSettings[cat] : defaultPreviewSettings[cat],\r\n                chkMimes = mimes && mimes.indexOf(file.type) !== -1,\r\n                footer = self.renderFileFooter(caption, config.width), modal = '',\r\n                ind = previewId.slice(previewId.lastIndexOf('-') + 1);\r\n            if (chkTypes || chkMimes) {\r\n                tmplt = self.parseFilePreviewIcon(tmplt, fname.split('.').pop());\r\n                if (cat === 'text') {\r\n                    strText = htmlEncode(theFile.target.result);\r\n                    id = 'text-' + uniqId();\r\n                    content = tmplt.replace(/\\{zoom}/g, self.getLayoutTemplate('zoom'));\r\n                    modal = self.getLayoutTemplate('modal').replace('{id}', id)\r\n                        .replace(/\\{title}/g, caption)\r\n                        .replace(/\\{body}/g, strText).replace(/\\{heading}/g, self.msgZoomModalHeading);\r\n                    content = content.replace(/\\{previewId}/g, previewId).replace(/\\{caption}/g, caption)\r\n                            .replace(/\\{width}/g, config.width).replace(/\\{height}/g, config.height)\r\n                            .replace(/\\{frameClass}/g, '').replace(/\\{zoomInd}/g, self.zoomIndicator)\r\n                            .replace(/\\{footer}/g, footer).replace(/\\{fileindex}/g, ind)\r\n                            .replace(/\\{type}/g, file.type).replace(/\\{zoomTitle}/g, self.msgZoomTitle)\r\n                            .replace(/\\{dialog}/g, \"$('#\" + id + \"').modal('show')\")\r\n                            .replace(/\\{data}/g, strText) + modal;\r\n                } else {\r\n                    content = tmplt.replace(/\\{previewId}/g, previewId).replace(/\\{caption}/g, caption)\r\n                        .replace(/\\{frameClass}/g, '').replace(/\\{type}/g, file.type).replace(/\\{fileindex}/g, ind)\r\n                        .replace(/\\{width}/g, config.width).replace(/\\{height}/g, config.height)\r\n                        .replace(/\\{footer}/g, footer).replace(/\\{data}/g, data);\r\n                }\r\n                self.clearDefaultPreview();\r\n                self.$preview.append(\"\\n\" + content);\r\n                self.validateImage(i, previewId, caption, file.type);\r\n            } else {\r\n                self.previewDefault(file, previewId);\r\n            }\r\n        },\r\n        slugDefault: function (text) {\r\n            return isEmpty(text) ? '' : text.split(/(\\\\|\\/)/g).pop().replace(/[^\\w\\u00C0-\\u017F\\-.\\\\\\/ ]+/g, '');\r\n        },\r\n        readFiles: function (files) {\r\n            this.reader = new FileReader();\r\n            var self = this, $el = self.$element, $preview = self.$preview, reader = self.reader,\r\n                $container = self.$previewContainer, $status = self.$previewStatus, msgLoading = self.msgLoading,\r\n                msgProgress = self.msgProgress, previewInitId = self.previewInitId, numFiles = files.length,\r\n                settings = self.fileTypeSettings, ctr = self.filestack.length, readFile,\r\n                throwError = function (msg, file, previewId, index) {\r\n                    var p1 = $.extend(self.getOutData({}, {}, files), {id: previewId, index: index}),\r\n                        p2 = {id: previewId, index: index, file: file, files: files};\r\n                    self.previewDefault(file, previewId, true);\r\n                    if (self.isUploadable) {\r\n                        self.pushStack(undefined);\r\n                    }\r\n                    setTimeout(readFile(index + 1), 100);\r\n                    self.initFileActions();\r\n                    return self.isUploadable ? self.showUploadError(msg, p1) : self.showError(msg, p2);\r\n                };\r\n\r\n            self.loadedImages = [];\r\n            self.totalImagesCount = 0;\r\n\r\n            $.each(files, function (key, file) {\r\n                var cat = 'image',\r\n                    func = isSet(cat, self.fileTypeSettings) ? self.fileTypeSettings[cat] : defaultFileTypeSettings[cat];\r\n                if (func && func(file.type)) {\r\n                    self.totalImagesCount++;\r\n                }\r\n            });\r\n\r\n            readFile = function (i) {\r\n                if (isEmpty($el.attr('multiple'))) {\r\n                    numFiles = 1;\r\n                }\r\n                if (i >= numFiles) {\r\n                    if (self.isUploadable && self.filestack.length > 0) {\r\n                        self.raise('filebatchselected', [self.getFileStack()]);\r\n                    } else {\r\n                        self.raise('filebatchselected', [files]);\r\n                    }\r\n                    $container.removeClass('file-thumb-loading');\r\n                    $status.html('');\r\n                    return;\r\n                }\r\n                var node = ctr + i, previewId = previewInitId + \"-\" + node, isText, file = files[i],\r\n                    caption = self.slug(file.name), fileSize = (file.size || 0) / 1000, checkFile, fileExtExpr = '',\r\n                    previewData = objUrl.createObjectURL(file), fileCount = 0, j, msg, typ, chk,\r\n                    fileTypes = self.allowedFileTypes, strTypes = isEmpty(fileTypes) ? '' : fileTypes.join(', '),\r\n                    fileExt = self.allowedFileExtensions, strExt = isEmpty(fileExt) ? '' : fileExt.join(', ');\r\n                if (!isEmpty(fileExt)) {\r\n                    fileExtExpr = new RegExp('\\\\.(' + fileExt.join('|') + ')$', 'i');\r\n                }\r\n                fileSize = fileSize.toFixed(2);\r\n                if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {\r\n                    msg = self.msgSizeTooLarge.replace('{name}', caption)\r\n                        .replace('{size}', fileSize)\r\n                        .replace('{maxSize}', self.maxFileSize);\r\n                    self.isError = throwError(msg, file, previewId, i);\r\n                    return;\r\n                }\r\n                if (!isEmpty(fileTypes) && isArray(fileTypes)) {\r\n                    for (j = 0; j < fileTypes.length; j += 1) {\r\n                        typ = fileTypes[j];\r\n                        checkFile = settings[typ];\r\n                        chk = (checkFile !== undefined && checkFile(file.type, caption));\r\n                        fileCount += isEmpty(chk) ? 0 : chk.length;\r\n                    }\r\n                    if (fileCount === 0) {\r\n                        msg = self.msgInvalidFileType.replace('{name}', caption).replace('{types}', strTypes);\r\n                        self.isError = throwError(msg, file, previewId, i);\r\n                        return;\r\n                    }\r\n                }\r\n                if (fileCount === 0 && !isEmpty(fileExt) && isArray(fileExt) && !isEmpty(fileExtExpr)) {\r\n                    chk = caption.match(fileExtExpr);\r\n                    fileCount += isEmpty(chk) ? 0 : chk.length;\r\n                    if (fileCount === 0) {\r\n                        msg = self.msgInvalidFileExtension.replace('{name}', caption).replace('{extensions}',\r\n                            strExt);\r\n                        self.isError = throwError(msg, file, previewId, i);\r\n                        return;\r\n                    }\r\n                }\r\n                if (!self.showPreview) {\r\n                    self.pushStack(file);\r\n                    setTimeout(readFile(i + 1), 100);\r\n                    self.raise('fileloaded', [file, previewId, i, reader]);\r\n                    return;\r\n                }\r\n                if ($preview.length > 0 && FileReader !== undefined) {\r\n                    $status.html(msgLoading.replace('{index}', i + 1).replace('{files}', numFiles));\r\n                    $container.addClass('file-thumb-loading');\r\n                    reader.onerror = function (evt) {\r\n                        self.errorHandler(evt, caption);\r\n                    };\r\n                    reader.onload = function (theFile) {\r\n                        self.previewFile(i, file, theFile, previewId, previewData);\r\n                        self.initFileActions();\r\n                    };\r\n                    reader.onloadend = function () {\r\n                        msg = msgProgress\r\n                            .replace('{index}', i + 1).replace('{files}', numFiles)\r\n                            .replace('{percent}', 50).replace('{name}', caption);\r\n                        setTimeout(function () {\r\n                            $status.html(msg);\r\n                            self.updateFileDetails(numFiles);\r\n                            readFile(i + 1);\r\n                        }, 100);\r\n                        self.raise('fileloaded', [file, previewId, i, reader]);\r\n                    };\r\n                    reader.onprogress = function (data) {\r\n                        if (data.lengthComputable) {\r\n                            var fact = (data.loaded / data.total) * 100, progress = Math.ceil(fact);\r\n                            msg = msgProgress.replace('{index}', i + 1).replace('{files}', numFiles)\r\n                                .replace('{percent}', progress).replace('{name}', caption);\r\n                            setTimeout(function () {\r\n                                $status.html(msg);\r\n                            }, 100);\r\n                        }\r\n                    };\r\n                    isText = isSet('text', settings) ? settings.text : defaultFileTypeSettings.text;\r\n                    if (isText(file.type, caption)) {\r\n                        reader.readAsText(file, self.textEncoding);\r\n                    } else {\r\n                        reader.readAsArrayBuffer(file);\r\n                    }\r\n                } else {\r\n                    self.previewDefault(file, previewId);\r\n                    setTimeout(function () {\r\n                        readFile(i + 1);\r\n                        self.updateFileDetails(numFiles);\r\n                    }, 100);\r\n                    self.raise('fileloaded', [file, previewId, i, reader]);\r\n                }\r\n                self.pushStack(file);\r\n            };\r\n\r\n            readFile(0);\r\n            self.updateFileDetails(numFiles, false);\r\n        },\r\n        updateFileDetails: function (numFiles) {\r\n            var self = this, $el = self.$element, fileStack = self.getFileStack(),\r\n                name = $el.val() || (fileStack.length && fileStack[0].name) || '', label = self.slug(name),\r\n                n = self.isUploadable ? fileStack.length : numFiles,\r\n                nFiles = previewCache.count(self.id) + n,\r\n                log = n > 1 ? self.getMsgSelected(nFiles) : label;\r\n            if (self.isError) {\r\n                self.$previewContainer.removeClass('file-thumb-loading');\r\n                self.$previewStatus.html('');\r\n                self.$captionContainer.find('.kv-caption-icon').hide();\r\n            } else {\r\n                self.showFileIcon();\r\n            }\r\n            self.setCaption(log, self.isError);\r\n            self.$container.removeClass('file-input-new file-input-ajax-new');\r\n            if (arguments.length === 1) {\r\n                self.raise('fileselect', [numFiles, label]);\r\n            }\r\n            if (previewCache.count(self.id)) {\r\n                self.initPreviewDeletes();\r\n            }\r\n        },\r\n        validateMinCount: function () {\r\n            var self = this, len = self.isUploadable ? self.getFileStack().length : self.$element.get(0).files.length;\r\n            if (self.validateInitialCount && self.minFileCount > 0 && self.getFileCount(len - 1) < self.minFileCount) {\r\n                self.noFilesError({});\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        getFileCount: function (fileCount) {\r\n            var self = this, addCount = 0;\r\n            if (self.validateInitialCount && !self.overwriteInitial) {\r\n                addCount = previewCache.count(self.id);\r\n                fileCount += addCount;\r\n            }\r\n            return fileCount;\r\n        },\r\n        change: function (e) {\r\n            var self = this, $el = self.$element;\r\n            if (!self.isUploadable && isEmpty($el.val()) && self.fileInputCleared) { // IE 11 fix\r\n                self.fileInputCleared = false;\r\n                return;\r\n            }\r\n            self.fileInputCleared = false;\r\n            var tfiles, msg, total, isDragDrop = arguments.length > 1,\r\n                files = isDragDrop ? e.originalEvent.dataTransfer.files : $el.get(0).files,\r\n                isSingleUpload = isEmpty($el.attr('multiple')), i = 0, f, n, folders = 0,\r\n                ctr = self.filestack.length, isAjaxUpload = self.isUploadable, len,\r\n                flagSingle = (isSingleUpload && ctr > 0),\r\n                throwError = function (mesg, file, previewId, index) {\r\n                    var p1 = $.extend(self.getOutData({}, {}, files), {id: previewId, index: index}),\r\n                        p2 = {id: previewId, index: index, file: file, files: files};\r\n                    return self.isUploadable ? self.showUploadError(mesg, p1) : self.showError(mesg, p2);\r\n                };\r\n            self.reader = null;\r\n            self.resetUpload();\r\n            self.hideFileIcon();\r\n            if (self.isUploadable) {\r\n                self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();\r\n            }\r\n            if (isDragDrop) {\r\n                tfiles = [];\r\n                while (files[i]) {\r\n                    f = files[i];\r\n                    if (!f.type && f.size % 4096 === 0) {\r\n                        folders++;\r\n                    } else {\r\n                        tfiles.push(f);\r\n                    }\r\n                    i++;\r\n                }\r\n            } else {\r\n                if (e.target.files === undefined) {\r\n                    tfiles = e.target && e.target.value ? [\r\n                        {name: e.target.value.replace(/^.+\\\\/, '')}\r\n                    ] : [];\r\n                } else {\r\n                    tfiles = e.target.files;\r\n                }\r\n            }\r\n            if (isEmpty(tfiles) || tfiles.length === 0) {\r\n                if (!isAjaxUpload) {\r\n                    self.clear();\r\n                }\r\n                self.showFolderError(folders);\r\n                self.raise('fileselectnone');\r\n                return;\r\n            }\r\n            self.resetErrors();\r\n            len = tfiles.length;\r\n            total = self.isUploadable ? self.getFileStack().length + len : len;\r\n            total = self.getFileCount(total);\r\n            if (self.maxFileCount > 0 && total > self.maxFileCount) {\r\n                if (!self.autoReplace || len > self.maxFileCount) {\r\n                    n = (self.autoReplace && len > self.maxFileCount) ? len : total;\r\n                    msg = self.msgFilesTooMany.replace('{m}', self.maxFileCount).replace('{n}', n);\r\n                    self.isError = throwError(msg, null, null, null);\r\n                    self.$captionContainer.find('.kv-caption-icon').hide();\r\n                    self.setCaption('', true);\r\n                    self.$container.removeClass('file-input-new file-input-ajax-new');\r\n                    return;\r\n                }\r\n                if (total > self.maxFileCount) {\r\n                    self.resetPreviewThumbs(isAjaxUpload);\r\n                }\r\n            } else {\r\n                if (!isAjaxUpload || flagSingle) {\r\n                    self.resetPreviewThumbs(false);\r\n                    if (flagSingle) {\r\n                        self.clearStack();\r\n                    }\r\n                } else {\r\n                    if (isAjaxUpload && ctr === 0 && (!previewCache.count(self.id) || self.overwriteInitial)) {\r\n                        self.resetPreviewThumbs(true);\r\n                    }\r\n                }\r\n            }\r\n            if (self.isPreviewable) {\r\n                self.readFiles(tfiles);\r\n            } else {\r\n                self.updateFileDetails(1);\r\n            }\r\n            self.showFolderError(folders);\r\n        },\r\n        getFileName: function (file) {\r\n            return file && file.name ? this.slug(file.name) : undefined;\r\n        },\r\n        getFileNames: function (skipNull) {\r\n            var self = this;\r\n            return self.filenames.filter(function (n) {\r\n                return (skipNull ? n !== undefined : n !== undefined && n !== null);\r\n            });\r\n        },\r\n        getFileStack: function (skipNull) {\r\n            var self = this;\r\n            return self.filestack.filter(function (n) {\r\n                return (skipNull ? n !== undefined : n !== undefined && n !== null);\r\n            });\r\n        },\r\n        clearStack: function () {\r\n            var self = this;\r\n            self.filestack = [];\r\n            self.filenames = [];\r\n        },\r\n        updateStack: function (i, file) {\r\n            var self = this;\r\n            self.filestack[i] = file;\r\n            self.filenames[i] = self.getFileName(file);\r\n        },\r\n        pushStack: function (file) {\r\n            var self = this;\r\n            self.filestack.push(file);\r\n            self.filenames.push(self.getFileName(file));\r\n        },\r\n        checkDimensions: function (i, chk, $img, $thumb, fname, type, params) {\r\n            var self = this, msg, dim, tag = chk === 'Small' ? 'min' : 'max',\r\n                limit = self[tag + 'Image' + type], $imgEl, isValid;\r\n            if (isEmpty(limit) || !$img.length) {\r\n                return;\r\n            }\r\n            $imgEl = $img[0];\r\n            dim = (type === 'Width') ? $imgEl.naturalWidth || $imgEl.width : $imgEl.naturalHeight || $imgEl.height;\r\n            isValid = chk === 'Small' ? dim >= limit : dim <= limit;\r\n            if (isValid) {\r\n                return;\r\n            }\r\n            msg = self['msgImage' + type + chk].replace('{name}', fname).replace('{size}', limit);\r\n            self.showUploadError(msg, params);\r\n            self.setThumbStatus($thumb, 'Error');\r\n            self.updateStack(i, null);\r\n        },\r\n        validateImage: function (i, previewId, fname, ftype) {\r\n            var self = this, $preview = self.$preview, params, w1, w2,\r\n                $thumb = $preview.find(\"#\" + previewId), $img = $thumb.find('img');\r\n            fname = fname || 'Untitled';\r\n            if (!$img.length) {\r\n                return;\r\n            }\r\n            handler($img, 'load', function () {\r\n                w1 = $thumb.width();\r\n                w2 = $preview.width();\r\n                if (w1 > w2) {\r\n                    $img.css('width', '100%');\r\n                    $thumb.css('width', '97%');\r\n                }\r\n                params = {ind: i, id: previewId};\r\n                self.checkDimensions(i, 'Small', $img, $thumb, fname, 'Width', params);\r\n                self.checkDimensions(i, 'Small', $img, $thumb, fname, 'Height', params);\r\n                if (!self.resizeImage) {\r\n                    self.checkDimensions(i, 'Large', $img, $thumb, fname, 'Width', params);\r\n                    self.checkDimensions(i, 'Large', $img, $thumb, fname, 'Height', params);\r\n                }\r\n                self.raise('fileimageloaded', [previewId]);\r\n                self.loadedImages.push({ind: i, img: $img, thumb: $thumb, pid: previewId, typ: ftype});\r\n                self.validateAllImages();\r\n                objUrl.revokeObjectURL($img.attr('src'));\r\n            });\r\n        },\r\n        validateAllImages: function () {\r\n            var self = this, i, config, $img, $thumb, pid, ind, params = {}, errFunc;\r\n            if (self.loadedImages.length !== self.totalImagesCount) {\r\n                return;\r\n            }\r\n            self.raise('fileimagesloaded');\r\n            if (!self.resizeImage) {\r\n                return;\r\n            }\r\n            errFunc = self.isUploadable ? self.showUploadError : self.showError;\r\n            for (i = 0; i < self.loadedImages.length; i++) {\r\n                config = self.loadedImages[i];\r\n                $img = config.img;\r\n                $thumb = config.thumb;\r\n                pid = config.pid;\r\n                ind = config.ind;\r\n                params = {id: pid, 'index': ind};\r\n                if (!self.getResizedImage($img[0], config.typ, pid, ind)) {\r\n                    errFunc(self.msgImageResizeError, params, 'fileimageresizeerror');\r\n                    self.setThumbStatus($thumb, 'Error');\r\n                    self.updateStack(ind, undefined);\r\n                }\r\n            }\r\n            self.raise('fileimagesresized');\r\n        },\r\n        getResizedImage: function (image, type, pid, ind) {\r\n            var self = this, width = image.naturalWidth, height = image.naturalHeight, ratio = 1,\r\n                maxWidth = self.maxImageWidth || width, maxHeight = self.maxImageHeight || height,\r\n                isValidImage = (width && height), chkWidth, chkHeight,\r\n                canvas = self.imageCanvas, context = self.imageCanvasContext;\r\n            if (!isValidImage) {\r\n                return false;\r\n            }\r\n            if (width === maxWidth && height === maxHeight) {\r\n                return true;\r\n            }\r\n            type = type || self.resizeDefaultImageType;\r\n            chkWidth = width > maxWidth;\r\n            chkHeight = height > maxHeight;\r\n            if (self.resizePreference === 'width') {\r\n                ratio = chkWidth ? maxWidth / width : (chkHeight ? maxHeight / height : 1);\r\n            } else {\r\n                ratio = chkHeight ? maxHeight / height : (chkWidth ? maxWidth / width : 1);\r\n            }\r\n            self.resetCanvas();\r\n            width *= ratio;\r\n            height *= ratio;\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            try {\r\n                context.drawImage(image, 0, 0, width, height);\r\n                canvas.toBlob(function (blob) {\r\n                    self.raise('fileimageresized', [pid, ind]);\r\n                    self.filestack[ind] = blob;\r\n                }, type, self.resizeQuality);\r\n                return true;\r\n            }\r\n            catch (err) {\r\n                return false;\r\n            }\r\n        },\r\n        initCaption: function () {\r\n            var self = this, cap = self.initialCaption || '';\r\n            if (self.overwriteInitial || isEmpty(cap)) {\r\n                self.$caption.html('');\r\n                return false;\r\n            }\r\n            self.setCaption(cap);\r\n            return true;\r\n        },\r\n        setCaption: function (content, isError) {\r\n            var self = this, title, out;\r\n            if (isError) {\r\n                title = $('<div>' + self.msgValidationError + '</div>').text();\r\n                out = '<span class=\"' + self.msgValidationErrorClass + '\">' +\r\n                    self.msgValidationErrorIcon + title + '</span>';\r\n            } else {\r\n                if (isEmpty(content) || self.$caption.length === 0) {\r\n                    return;\r\n                }\r\n                title = $('<div>' + content + '</div>').text();\r\n                out = self.getLayoutTemplate('icon') + title;\r\n            }\r\n            self.$caption.html(out);\r\n            self.$caption.attr('title', title);\r\n            self.$captionContainer.find('.file-caption-ellipsis').attr('title', title);\r\n        },\r\n        initBrowse: function ($container) {\r\n            var self = this;\r\n            self.$btnFile = $container.find('.btn-file');\r\n            self.$btnFile.append(self.$element);\r\n        },\r\n        createContainer: function () {\r\n            var self = this,\r\n                $container = $(document.createElement(\"div\"))\r\n                    .attr({\"class\": 'file-input file-input-new'})\r\n                    .html(self.renderMain());\r\n            self.$element.before($container);\r\n            self.initBrowse($container);\r\n            return $container;\r\n        },\r\n        refreshContainer: function () {\r\n            var self = this, $container = self.$container;\r\n            $container.before(self.$element);\r\n            $container.html(self.renderMain());\r\n            self.initBrowse($container);\r\n        },\r\n        renderMain: function () {\r\n            var self = this, dropCss = (self.isUploadable && self.dropZoneEnabled) ? ' file-drop-zone' : 'file-drop-disabled',\r\n                close = !self.showClose ? '' : self.getLayoutTemplate('close'),\r\n                preview = !self.showPreview ? '' : self.getLayoutTemplate('preview')\r\n                    .replace(/\\{class}/g, self.previewClass)\r\n                    .replace(/\\{dropClass}/g, dropCss),\r\n                css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,\r\n                caption = self.captionTemplate.replace(/\\{class}/g, css + ' kv-fileinput-caption');\r\n            return self.mainTemplate.replace(/\\{class}/g, self.mainClass)\r\n                .replace(/\\{preview}/g, preview)\r\n                .replace(/\\{close}/g, close)\r\n                .replace(/\\{caption}/g, caption)\r\n                .replace(/\\{upload}/g, self.renderButton('upload'))\r\n                .replace(/\\{remove}/g, self.renderButton('remove'))\r\n                .replace(/\\{cancel}/g, self.renderButton('cancel'))\r\n                .replace(/\\{browse}/g, self.renderButton('browse'));\r\n        },\r\n        renderButton: function (type) {\r\n            var self = this, tmplt = self.getLayoutTemplate('btnDefault'), css = self[type + 'Class'],\r\n                title = self[type + 'Title'], icon = self[type + 'Icon'], label = self[type + 'Label'],\r\n                status = self.isDisabled ? ' disabled' : '', btnType = 'button';\r\n            switch (type) {\r\n                case 'remove':\r\n                    if (!self.showRemove) {\r\n                        return '';\r\n                    }\r\n                    break;\r\n                case 'cancel':\r\n                    if (!self.showCancel) {\r\n                        return '';\r\n                    }\r\n                    css += ' hide';\r\n                    break;\r\n                case 'upload':\r\n                    if (!self.showUpload) {\r\n                        return '';\r\n                    }\r\n                    if (self.isUploadable && !self.isDisabled) {\r\n                        tmplt = self.getLayoutTemplate('btnLink').replace('{href}', self.uploadUrl);\r\n                    } else {\r\n                        btnType = 'submit';\r\n                    }\r\n                    break;\r\n                case 'browse':\r\n                    tmplt = self.getLayoutTemplate('btnBrowse');\r\n                    break;\r\n                default:\r\n                    return '';\r\n            }\r\n            css += type === 'browse' ? ' btn-file' : ' fileinput-' + type + ' fileinput-' + type + '-button';\r\n            if (!isEmpty(label)) {\r\n                label = ' <span class=\"' + self.buttonLabelClass + '\">' + label + '</span>';\r\n            }\r\n            return tmplt.replace('{type}', btnType)\r\n                .replace('{css}', css)\r\n                .replace('{title}', title)\r\n                .replace('{status}', status)\r\n                .replace('{icon}', icon)\r\n                .replace('{label}', label);\r\n        }\r\n    }\r\n    ;\r\n\r\n//FileInput plugin definition\r\n    $.fn.fileinput = function (option) {\r\n        if (!hasFileAPISupport() && !isIE(9)) {\r\n            return;\r\n        }\r\n        var args = Array.apply(null, arguments), retvals = [];\r\n        args.shift();\r\n        this.each(function () {\r\n            var $this = $(this), data = $this.data('fileinput'), defaults,\r\n                options = typeof option === 'object' && option,\r\n                lang = options.language || $this.data('language') || 'en';\r\n\r\n            if (!data) {\r\n                defaults = $.extend({}, $.fn.fileinput.defaults);\r\n                if (lang !== 'en' && !isEmpty($.fn.fileinputLocales[lang])) {\r\n                    defaults = $.extend(defaults, $.fn.fileinputLocales[lang]);\r\n                }\r\n                data = new FileInput(this, $.extend(defaults, options, $this.data()));\r\n                $this.data('fileinput', data);\r\n            }\r\n\r\n            if (typeof option === 'string') {\r\n                retvals.push(data[option].apply(data, args));\r\n            }\r\n        });\r\n        switch (retvals.length) {\r\n            case 0:\r\n                return this;\r\n            case 1:\r\n                return retvals[0];\r\n            default:\r\n                return retvals;\r\n        }\r\n    };\r\n\r\n    $.fn.fileinput.defaults = {\r\n        language: 'en',\r\n        showCaption: true,\r\n        showPreview: true,\r\n        showRemove: true,\r\n        showUpload: true,\r\n        showCancel: true,\r\n        showClose: true,\r\n        showUploadedThumbs: true,\r\n        autoReplace: false,\r\n        mainClass: '',\r\n        previewClass: '',\r\n        captionClass: '',\r\n        mainTemplate: null,\r\n        initialCaption: '',\r\n        initialPreview: [],\r\n        initialPreviewDelimiter: '*$$*',\r\n        initialPreviewConfig: [],\r\n        initialPreviewThumbTags: [],\r\n        previewThumbTags: {},\r\n        initialPreviewShowDelete: true,\r\n        deleteUrl: '',\r\n        deleteExtraData: {},\r\n        overwriteInitial: true,\r\n        layoutTemplates: defaultLayoutTemplates,\r\n        previewTemplates: defaultPreviewTemplates,\r\n        allowedPreviewTypes: defaultPreviewTypes,\r\n        allowedPreviewMimeTypes: null,\r\n        allowedFileTypes: null,\r\n        allowedFileExtensions: null,\r\n        defaultPreviewContent: null,\r\n        customLayoutTags: {},\r\n        customPreviewTags: {},\r\n        previewSettings: defaultPreviewSettings,\r\n        fileTypeSettings: defaultFileTypeSettings,\r\n        previewFileIcon: '<i class=\"glyphicon glyphicon-file\"></i>',\r\n        previewFileIconClass: 'file-icon-4x',\r\n        previewFileIconSettings: {},\r\n        previewFileExtSettings: {},\r\n        buttonLabelClass: 'hidden-xs',\r\n        browseIcon: '<i class=\"glyphicon glyphicon-folder-open\"></i>',\r\n        browseClass: 'btn btn-primary',\r\n        removeIcon: '<i class=\"glyphicon glyphicon-trash\"></i>',\r\n        removeClass: 'btn btn-default',\r\n        cancelIcon: '<i class=\"glyphicon glyphicon-ban-circle\"></i>',\r\n        cancelClass: 'btn btn-default',\r\n        uploadIcon: '<i class=\"glyphicon glyphicon-upload\"></i>',\r\n        uploadClass: 'btn btn-default',\r\n        uploadUrl: null,\r\n        uploadAsync: true,\r\n        uploadExtraData: {},\r\n        minImageWidth: null,\r\n        minImageHeight: null,\r\n        maxImageWidth: null,\r\n        maxImageHeight: null,\r\n        resizeImage: false,\r\n        resizePreference: 'width',\r\n        resizeQuality: 0.92,\r\n        resizeDefaultImageType: 'image/jpeg',\r\n        maxFileSize: 0,\r\n        minFileCount: 0,\r\n        maxFileCount: 0,\r\n        validateInitialCount: false,\r\n        msgValidationErrorClass: 'text-danger',\r\n        msgValidationErrorIcon: '<i class=\"glyphicon glyphicon-exclamation-sign\"></i> ',\r\n        msgErrorClass: 'file-error-message',\r\n        progressThumbClass: \"progress-bar progress-bar-success progress-bar-striped active\",\r\n        progressClass: \"progress-bar progress-bar-success progress-bar-striped active\",\r\n        progressCompleteClass: \"progress-bar progress-bar-success\",\r\n        previewFileType: 'image',\r\n        zoomIndicator: '<i class=\"glyphicon glyphicon-zoom-in\"></i>',\r\n        elCaptionContainer: null,\r\n        elCaptionText: null,\r\n        elPreviewContainer: null,\r\n        elPreviewImage: null,\r\n        elPreviewStatus: null,\r\n        elErrorContainer: null,\r\n        errorCloseButton: '<span class=\"close kv-error-close\">&times;</span>',\r\n        slugCallback: null,\r\n        dropZoneEnabled: true,\r\n        dropZoneTitleClass: 'file-drop-zone-title',\r\n        fileActionSettings: {},\r\n        otherActionButtons: '',\r\n        textEncoding: 'UTF-8',\r\n        ajaxSettings: {},\r\n        ajaxDeleteSettings: {},\r\n        showAjaxErrorDetails: true\r\n    };\r\n\r\n    $.fn.fileinputLocales.en = {\r\n        fileSingle: 'file',\r\n        filePlural: 'files',\r\n        browseLabel: 'Browse &hellip;',\r\n        removeLabel: 'Remove',\r\n        removeTitle: 'Clear selected files',\r\n        cancelLabel: 'Cancel',\r\n        cancelTitle: 'Abort ongoing upload',\r\n        uploadLabel: 'Upload',\r\n        uploadTitle: 'Upload selected files',\r\n        msgZoomTitle: 'View details',\r\n        msgZoomModalHeading: 'Detailed Preview',\r\n        msgSizeTooLarge: 'File \"{name}\" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',\r\n        msgFilesTooLess: 'You must select at least <b>{n}</b> {files} to upload.',\r\n        msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.',\r\n        msgFileNotFound: 'File \"{name}\" not found!',\r\n        msgFileSecured: 'Security restrictions prevent reading the file \"{name}\".',\r\n        msgFileNotReadable: 'File \"{name}\" is not readable.',\r\n        msgFilePreviewAborted: 'File preview aborted for \"{name}\".',\r\n        msgFilePreviewError: 'An error occurred while reading the file \"{name}\".',\r\n        msgInvalidFileType: 'Invalid type for file \"{name}\". Only \"{types}\" files are supported.',\r\n        msgInvalidFileExtension: 'Invalid extension for file \"{name}\". Only \"{extensions}\" files are supported.',\r\n        msgUploadAborted: 'The file upload was aborted',\r\n        msgValidationError: 'File Upload Error',\r\n        msgLoading: 'Loading file {index} of {files} &hellip;',\r\n        msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',\r\n        msgSelected: '{n} {files} selected',\r\n        msgFoldersNotAllowed: 'Drag & drop files only! {n} folder(s) dropped were skipped.',\r\n        msgImageWidthSmall: 'Width of image file \"{name}\" must be at least {size} px.',\r\n        msgImageHeightSmall: 'Height of image file \"{name}\" must be at least {size} px.',\r\n        msgImageWidthLarge: 'Width of image file \"{name}\" cannot exceed {size} px.',\r\n        msgImageHeightLarge: 'Height of image file \"{name}\" cannot exceed {size} px.',\r\n        msgImageResizeError: 'Could not get the image dimensions to resize.',\r\n        msgImageResizeException: 'Error while resizing the image.<pre>{errors}</pre>',\r\n        dropZoneTitle: 'Drag & drop files here &hellip;'\r\n    };\r\n\r\n    $.extend($.fn.fileinput.defaults, $.fn.fileinputLocales.en);\r\n\r\n    $.fn.fileinput.Constructor = FileInput;\r\n\r\n    /**\r\n     * Convert automatically file inputs with class 'file'\r\n     * into a bootstrap fileinput control.\r\n     */\r\n    $(document).ready(function () {\r\n        var $input = $('input.file[type=file]');\r\n        if ($input.length) {\r\n            $input.fileinput();\r\n        }\r\n    });\r\n}));","/*!\r\n * FileInput Chinese Translations\r\n *\r\n * This file must be loaded after 'fileinput.js'. Patterns in braces '{}', or\r\n * any HTML markup tags in the messages must not be converted or translated.\r\n *\r\n * @see http://github.com/kartik-v/bootstrap-fileinput\r\n * @author kangqf <kangqingfei@gmail.com>\r\n *\r\n * NOTE: this file must be saved in UTF-8 encoding.\r\n */\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    $.fn.fileinputLocales['zh'] = {\r\n        fileSingle: '文件',\r\n        filePlural: '多个文件',\r\n        browseLabel: '选择 &hellip;',\r\n        removeLabel: '移除',\r\n        removeTitle: '清除选中文件',\r\n        cancelLabel: '取消',\r\n        cancelTitle: '取消进行中的上传',\r\n        uploadLabel: '上传',\r\n        uploadTitle: '上传选中文件',\r\n        msgZoomTitle: '查看详情',\r\n        msgZoomModalHeading: '详细预览',\r\n        msgSizeTooLarge: '文件 \"{name}\" (<b>{size} KB</b>) 超过了允许大小 <b>{maxSize} KB</b>.',\r\n        msgFilesTooLess: '你必须选择最少 <b>{n}</b> {files} 来上传. ',\r\n        msgFilesTooMany: '选择的上传文件个数 <b>({n})</b> 超出最大文件的限制个数 <b>{m}</b>.',\r\n        msgFileNotFound: '文件 \"{name}\" 未找到!',\r\n        msgFileSecured: '安全限制，为了防止读取文件 \"{name}\".',\r\n        msgFileNotReadable: '文件 \"{name}\" 不可读.',\r\n        msgFilePreviewAborted: '取消 \"{name}\" 的预览.',\r\n        msgFilePreviewError: '读取 \"{name}\" 时出现了一个错误.',\r\n        msgInvalidFileType: '不正确的类型 \"{name}\". 只支持 \"{types}\" 类型的文件.',\r\n        msgInvalidFileExtension: '不正确的文件扩展名 \"{name}\". 只支持 \"{extensions}\" 的文件扩展名.',\r\n        msgUploadAborted: '该文件上传被中止',\r\n        msgValidationError: '文件上传错误',\r\n        msgLoading: '加载第 {index} 文件 共 {files} &hellip;',\r\n        msgProgress: '加载第 {index} 文件 共 {files} - {name} - {percent}% 完成.',\r\n        msgSelected: '{n} {files} 选中',\r\n        msgFoldersNotAllowed: '只支持拖拽文件! 跳过 {n} 拖拽的文件夹.',\r\n        msgImageWidthSmall: '宽度的图像文件的\"{name}\"的必须是至少{size}像素.',\r\n        msgImageHeightSmall: '图像文件的\"{name}\"的高度必须至少为{size}像素.',\r\n        msgImageWidthLarge: '宽度的图像文件\"{name}\"不能超过{size}像素.',\r\n        msgImageHeightLarge: '图像文件\"{name}\"的高度不能超过{size}像素.',\r\n        msgImageResizeError: '无法获取的图像尺寸调整。',\r\n        msgImageResizeException: '错误而调整图像大小。<pre>{errors}</pre>',\r\n        dropZoneTitle: '拖拽文件到这里 &hellip;',\r\n        slugCallback: function(text) {\r\n            return text ? text.split(/(\\\\|\\/)/g).pop().replace(/[^\\w\\u4e00-\\u9fa5\\-.\\\\\\/ ]+/g, '') : '';\r\n        },\r\n        fileActionSettings: {\r\n            removeTitle: '删除文件',\r\n            uploadTitle: '上传文件',\r\n            indicatorNewTitle: '没有上传',\r\n            indicatorSuccessTitle: '上传',\r\n            indicatorErrorTitle: '上传错误',\r\n            indicatorLoadingTitle: '上传 ...'\r\n        }\r\n    };\r\n})(window.jQuery);"],"sourceRoot":"/source/"}